
CREATE or replace FUNCTION registrar_entrada_alumno(IN ids_alumnos_param text,ID_GENERO integer) 
	RETURNS SETOF integer
 	LANGUAGE plpgsql 	
 AS
$$
DECLARE
	--ids_alumnos_param text := '2,4,5,6';
	ids_alumnos integer[];
	id_alumnos_horas_extras text;
	alumno_loop RECORD;
	id_alumno_loop integer;
	asistencia_alumno record;
	id_retorno integer;
BEGIN

	IF ids_alumnos_param is null THEN		
		raise notice 'Es null la lista de alumnos param ';
		--retorno := false;
	ELSE
		raise notice 'Iniciando';
		ids_alumnos := string_to_array(ids_alumnos_param,','); 	
		
		FOR alumno_loop IN ( 
				SELECT * 
				FROM co_alumno 
				WHERE ID = ANY(ids_alumnos::INT[]) and eliminado = false					
		) LOOP 
			raise notice 'alumno id %  nombre  %',alumno_loop.id,alumno_loop.nombre ;
			select * 
			from co_asistencia a 
			where a.co_alumno = alumno_loop.id 
					and hora_salida is null
					and a.eliminado = false 
			INTO asistencia_alumno;	
						
			IF NOT FOUND THEN
				raise notice 'no existe ningun registro de asistencia procede la operacion';
				INSERT INTO CO_ASISTENCIA(fecha,co_alumno,hora_entrada,usuario,genero)
				values(getDate(''),alumno_loop.id,(getDate('')+getHora(''))::timestamp,ID_GENERO,ID_GENERO)
				RETURNING id into id_retorno;
				--select array_append(array_retorno, alumno_loop.id);
				--raise notice 'lista se registrados %',array_retorno;
				return next id_retorno;								
			ELSE 
				raise notice 'Ya existe un registro de asistencia para el alumno id = %',asistencia_alumno.id;
			END IF;					
		END LOOP; 						
	END IF;	
	RETURN;	
END; --END FUNCTION 
$$ 




CREATE or replace FUNCTION eliminar_cargos_alumno(IN ids_cargos_param text,motivo text,ID_GENERO integer) 
RETURNS SETOF integer
LANGUAGE plpgsql 	
AS
$$
DECLARE 
	cargo_loop RECORD;		
	ids_cargos_eliminar integer[];		
	total_cargos_suma numeric := 0;
BEGIN  
		raise notice 'eliminar cargos '; 

	IF ids_cargos_param is null THEN		
		raise notice 'Es null la lista de alumnos param ';				
	ELSE
			ids_cargos_eliminar = string_to_array(ids_cargos_param,','); 	 		 
	 		raise notice 'cargos a eliminar %',ids_cargos_eliminar;	 	
			
			UPDATE CO_CARGO_BALANCE_ALUMNO 
            SET fecha_modifico = (getDate('')+getHora(''))::timestamp,
				motivo_eliminacion = motivo,
                modifico = ID_GENERO,
				eliminado = true	
        	WHERE id = ANY(ids_cargos_eliminar::INT[]);
				
		FOR cargo_loop IN ( 
			select * from co_cargo_balance_alumno where id = ANY(ids_cargos_eliminar::INT[])
		) LOOP 
					raise notice 'recalculando balance %  ',cargo_loop.co_balance_alumno;		
							
					select sum(total) 
					from co_cargo_balance_alumno 
					where co_balance_alumno =  cargo_loop.co_balance_alumno and eliminado = false
					INTO total_cargos_suma;
	
			raise notice 'total cargos %  ',total_cargos_suma;
				
			update co_balance_alumno 			
			SET total_adeudo = total_cargos_suma,			
				total_cargos = total_cargos_suma,
				fecha_modifico = (getDate('')+getHora(''))::timestamp,
				modifico = ID_GENERO
			where id = cargo_loop.co_balance_alumno;			
			
			return next cargo_loop.id;			
		END LOOP; 	
	
	END IF;
	RETURN;		
END;
$$ 






CREATE OR REPLACE FUNCTION public.agregar_cargo_alumno(id_alumno integer, id_cargo integer, cantidad integer, nota text, id_genero integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
	alumno_record RECORD;
	cargo_record RECORD;
	balance_record co_balance_alumno%ROWTYPE;
	fecha_current date;
	fecha_inicio date;
	cargo_monetario numeric;
	fecha_fin date;	
	_numero_anio int;
	_numero_mes int;	
	_nombre_mes text;	
	CARGO_MENSUALIDAD int := 1;
	CARGO_HORA_EXTRA int := 3;
	suma_total numeric;
	cargo_aplicar numeric := 0;
	cantidad_aplicar integer := 1;
	existe_registro boolean := false;
	retorno integer := null;
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
	id_balance_alumno integer;
	existe_cargo boolean := false;
	proceder_insert boolean := true;
	sqlInsertDetalle TEXT := 'INSERT INTO co_cargo_balance_alumno(CO_BALANCE_ALUMNO,Cat_Cargo,FECHA,CANTIDAD,CARGO,TOTAL,NOTA,GENERO)
							VALUES($1,$2,$3,$4,$5,$6,$7,$8)';								
BEGIN    
	raise notice 'AGREGAR CARGO';	
	fecha_current := getDate('');
		--balance alumno

	select * from co_alumno where id = id_alumno INTO alumno_record;		
		
	select * from co_balance_alumno where id = alumno_record.co_balance_alumno and eliminado = false 
			INTO balance_record;
			
	--IF balance_record is not null THEN
	IF FOUND THEN
		SELECT cargo.nombre,cargo.descripcion,cargo.precio
		FROM cat_cargo cargo 
		WHERE cargo.id = id_cargo
		INTO cargo_record;		
			
	
		--aplicar cargo
		IF id_cargo = CARGO_MENSUALIDAD THEN
			raise notice 'Aplicando cargo de mensualidad ';											
			cargo_aplicar := alumno_record.costo_colegiatura;					
		ELSE 
			IF id_cargo = CARGO_HORA_EXTRA THEN
				-- validar si existe la hora
				--select * from co_detalle_balance_alumno where cat_cargo = CARGO_HORA_EXTRA INTO 
				raise notice 'Cargo por hora extra';
				cargo_aplicar := cargo_record.precio;					
			ELSE 
				--Es un cargo de otra cosa
				raise notice 'Cargo generico';				
				cargo_aplicar := cargo_record.precio;			
			END IF;				
		END IF;
		
		--select to_char(getDate(''),'MMYYYY')
		
		-- registrar detalle				
		IF id_cargo = CARGO_MENSUALIDAD THEN
			    select true 
				from co_cargo_balance_alumno 
				where cat_cargo = CARGO_MENSUALIDAD AND co_balance_alumno = balance_record.id
													AND to_char(fecha::date,'MMYYYY') = to_char(getDate(''),'MMYYYY')
			INTO existe_cargo;		
			
			raise notice 'el cargo de mensualidad existe ? %',existe_cargo;
			IF existe_cargo THEN
				proceder_insert = false;
			END IF;			
		END IF;
		
		raise notice 'PROCEDER AL INSERRT %',proceder_insert;
		
		IF proceder_insert THEN 
		/*
				EXECUTE sqlInsertDetalle
					USING balance_record.ID,
							id_cargo,
							(getDate('')+getHora(''))::timestamp,
							cantidad,
							cargo_aplicar,
							(cargo_aplicar * cantidad),					
							nota,
							id_genero;	*/					
				INSERT INTO co_cargo_balance_alumno(CO_BALANCE_ALUMNO,Cat_Cargo,FECHA,CANTIDAD,CARGO,TOTAL,NOTA,GENERO)
				VALUES(
							balance_record.ID,
							id_cargo,
							(getDate('')+getHora(''))::timestamp,
							cantidad,
							cargo_aplicar,
							(cargo_aplicar * cantidad),					
							nota,
							id_genero
				) RETURNING ID 
				INTO retorno;
		
				---actualizar total balance alumno Agregar cargos								
				UPDATE CO_BALANCE_ALUMNO
				SET TOTAL_CARGOS = (TOTAL_CARGOS + (cargo_aplicar * cantidad)),
					TOTAL_ADEUDO = (TOTAL_ADEUDO + (cargo_aplicar * cantidad))				
				where id = balance_record.id ;
		END IF;
	
	ELSE
		raise notice 'NO EXISTE EL BALANCE';
	
	END IF;		
--	retorno := true;
	return (select retorno);
END;
$function$
			




select registrar_salida_alumno('5297,5298','5298',1);

CREATE or replace FUNCTION registrar_salida_alumno(IN ids_asistencias_param text,ids_asistencias_calculo_horas_extras text,ID_GENERO integer,OUT retorno boolean) 
	RETURNS boolean
 	LANGUAGE plpgsql 	
 AS
$$
DECLARE
	ids_asistencias integer[];
	id_alumnos_horas_extras integer[];
	id_alumnos_calcular_horas_extras_param text;
BEGIN
	IF ids_asistencias_param is null THEN		
		raise notice 'Es null la lista de ids de asistencias param ';
		retorno := false;
	ELSE
		ids_asistencias := string_to_array(ids_asistencias_param,','); 
		id_alumnos_horas_extras := string_to_array(ids_asistencias_calculo_horas_extras,','); 
				
		UPDATE CO_ASISTENCIA 
                     SET hora_salida = (getDate('')+getHora(''))::timestamp,
			 fecha_modifico = (getDate('')+getHora(''))::timestamp,
                     	  modifico = ID_GENERO
               WHERE id = ANY(ids_asistencias::INT[]);
		
		select string_agg(co_alumno::text,',') 
		from co_asistencia 
		where id = ANY(id_alumnos_horas_extras::INT[])
		INTO id_alumnos_calcular_horas_extras_param;				

		IF id_alumnos_calcular_horas_extras_param is not null THEN
		
			PERFORM generar_horas_extras_alumno(id_alumnos_calcular_horas_extras_param,ID_GENERO);		
		END IF;
			
	END IF;	
	retorno := true;
END; --END FUNCTION 
$



CREATE or replace FUNCTION generar_horas_extras_alumno(IN ids_alumnos_param text,ID_GENERO integer,OUT retorno boolean) 
	RETURNS boolean
 	LANGUAGE plpgsql 	
 AS
--do
$$
DECLARE
	asistencia RECORD;	
	hora_generate TIMESTAMP;	
	hora_inicio_hora_extra TIMESTAMP;	
	hora_fin_hora_extra TIMESTAMP;	
	fecha_current TIMESTAMP;	
	hora_extra_encontrada RECORD;
	INTERVALO_TIEMPO_HORA_EXTRA text := '1 hour';
	ID_HORA_EXTRA integer := 3;
	--ID_GENERO integer := 1;
	ID_PADRE integer := 1;
	ID_MADRE integer := 2;
	papas_record RECORD;	
	fallo boolean := false;
	mensaje_fallo text :='';
	token_familiar text := '';
	ids_alumnos integer[];
bEGIN
	IF ids_alumnos_param is null THEN		
		raise notice 'Es null la lista de alumnos param ';
		retorno := false;
	ELSE

		 ids_alumnos := string_to_array(ids_alumnos_param,','); 

		 raise notice ' Ids alumnos % ',ids_alumnos;

		FOR asistencia IN ( 
				select a.id as id_asistencia,
						a.co_alumno,
						a.fecha as fecha_entrada_asistencia,
						a.hora_entrada as hora_entrada_asistencia ,
						a.hora_salida as hora_salida_asistencia,
						alumno.minutos_gracia,
						alumno.nombre as nombre_alumno, 
						alumno.hora_salida as hora_salida_alumno,
						(alumno.hora_salida + interval '1 minute' * alumno.minutos_gracia) as hora_salida_mas_minutos_gracia_alumno
				from co_asistencia a inner join co_alumno alumno on a.co_alumno = alumno.id
				where a.co_alumno = ANY(ids_alumnos::INT[]) and a.fecha = getDate('') and a.hora_salida is not null and a.eliminado = false	
				order by a.hora_salida desc
				limit 1

		) LOOP 
			-- si hora de salida de asistencia es mayor a la hora salida registrada + minutos gracias
					IF asistencia.hora_salida_asistencia >= (asistencia.hora_salida_asistencia::date+asistencia.hora_salida_mas_minutos_gracia_alumno) THEN
					raise notice 'calcular horas extras alumno %',asistencia.nombre_alumno;
					FOR hora_generate IN ( 															
								SELECT * FROM generate_series((asistencia.hora_salida_asistencia::date + asistencia.hora_salida_alumno)::timestamp,
												asistencia.hora_salida_asistencia::timestamp,'1 hour')
							) 
					LOOP 	
						hora_inicio_hora_extra := hora_generate;
						hora_fin_hora_extra := (hora_generate + interval '1 hour');
						fecha_current := (getDate('')+getHora(''))::timestamp;
					
						raise notice 'validando la existencia de la hora extra INICIO %  FIN %',hora_inicio_hora_extra,hora_fin_hora_extra;
								select * from co_hora_extra he 
										where fecha::date = asistencia.fecha_entrada_asistencia
												--and co_asistencia = asistencia.id_asistencia
												and co_alumno = asistencia.co_alumno
												and hora_inicio = hora_inicio_hora_extra
												and hora_fin =  hora_fin_hora_extra
												and eliminado = false
								INTO hora_extra_encontrada;
						IF NOT FOUND THEN		
							raise notice 'SE PROCEDE A LA INSERCIÓN';
							/*
							14-nov-19 */
							--modificacion para no generar registros en la tabla co_hora_extra
							INSERT INTO CO_HORA_EXTRA (CO_ASISTENCIA,CO_ALUMNO,FECHA,HORA_INICIO,HORA_FIN,FECHA_GENERO,GENERO)
							VALUES(asistencia.id_asistencia,
									asistencia.co_alumno,
									fecha_current,
								  	hora_inicio_hora_extra,hora_fin_hora_extra,fecha_current,ID_GENERO);							
												
							PERFORM agregar_cargo_alumno(asistencia.co_alumno,ID_HORA_EXTRA,1,
														'Cargo por Tiempo Extra del '||fecha_current::date||', de '||hora_inicio_hora_extra::time||' a '||(hora_fin_hora_extra)::time||', alumno '
														||asistencia.nombre_alumno||'.'
														,ID_GENERO);
								
						--insertar en notificaciones
								FOR papas_record IN ( 			
										select rel.envio_avisos,rel.co_alumno,f.token,f.*
												from co_alumno_familiar rel inner join co_familiar f on rel.co_familiar = f.id
										where co_alumno = asistencia.co_alumno
												and rel.autorizado_para_entrega = true
												and rel.eliminado = false
												and f.eliminado = false
												and rel.co_parentesco in (ID_PADRE,ID_MADRE)  
												order by rel.co_parentesco desc  
								) LOOP				
										IF papas_record.token is null THEN
											fallo := true;
											mensaje_fallo := 'EL FAMILIAR NO CUENTA CON UN TOKEN. [ALUMNO '||asistencia.nombre_alumno||']';									
										ELSE
											token_familiar := papas_record.token;
										END IF;	
									
										INSERT INTO SI_NOTIFICACION (FECHA,TITULO,CUERPO,ICON,TOKEN,fallo,mensaje_fallo,FECHA_GENERO,GENERO)
											VALUES(fecha_current,											
														'Cargo por Tiempo Extra',
														'Cargo por Tiempo Extra del '||fecha_current::date||', de '||hora_inicio_hora_extra::time||' a '||(hora_fin_hora_extra)::time||', alumno '
														||asistencia.nombre_alumno||'.',
														'DEFAULT',
														token_familiar,
														fallo,
														mensaje_fallo,
														fecha_current,
														ID_GENERO);			
										raise notice 'INSERCION DE HORA EXTRA EXISTOSA';
								END LOOP;																							
						ELSE 
							raise notice 'YA EXISTE UN REGISTRO CON LAS HORAS EXPECIFICADAS, NO SE INSERTO';
						END IF;					
					
					  END LOOP;-- LOOP DE HORAS GENERADAS
				ELSE 
					raise notice 'SIN CALCULAR HORAS EXTRAS ';
												
				END IF; --END ASISTENCIA + HORA SALIDA						
			END LOOP;					
	END IF; --EN ALUMNOS NOT NULL		
	
	retorno:=true;
	
END; --END FUNCTION 
$$ 


CREATE or replace FUNCTION registrar_cargo_mensualidad_alumnos() RETURNS VOID AS $$
DECLARE 
	alumno_loop RECORD;
	id_cat_cargo integer := 1;
	nota_cargo text := 'CARGO AUTOMÁTICO DE MENSUALIDAD ';
	cantidad integer := 1;
	id_genero integer :=1;
	nombre_mes text := '';
BEGIN  

	raise notice 'registrar cargo de mensualidad de alumnos.';

	  SELECT to_char((getDate('')+getHora(''))::timestamp, 'TMmon') INTO nombre_mes;
		nota_cargo := nota_cargo ||UPPER(nombre_mes)||'.';
		
		FOR alumno_loop IN ( 
			select * from co_alumno where eliminado = false
		) LOOP 
			raise notice 'Iniciando cargos de mensualidad aútomaticos, alumno % ',alumno_loop.nombre;		
			
			--agregar_cargo_alumno(id_alumno,cat_cargo,cantidad,nota,genero)
			PERFORM agregar_cargo_alumno(alumno_loop.id,id_cat_cargo,cantidad,nota_cargo,id_genero);					
			--agregar un item en la notificacion para enviar un mensaje al papa para que pase a pagar su mensualidad			
		END LOOP; 	
END;
$$ 
LANGUAGE 'plpgsql';




/************************************************************************/
//***Nueva version para escribir cargos
// Agregar la fecha y demas parametros para escribir el monto
/************************************************************************/

CREATE OR REPLACE FUNCTION agregar_cargo_alumno(
		fecha_cargo date,id_alumno integer, id_cargo integer, cantidad integer,monto numeric,nota text, id_genero integer
	)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
	alumno_record RECORD;
	cargo_record RECORD;
	balance_record co_balance_alumno%ROWTYPE;
	fecha_current date;
	fecha_inicio date;
	cargo_monetario numeric;
	fecha_fin date;	
	_numero_anio int;
	_numero_mes int;	
	_nombre_mes text;	
	CARGO_MENSUALIDAD int := 1;
	CARGO_INSCRIPCION int := 2;
	CARGO_HORA_EXTRA int := 3;	
	suma_total numeric;
	cargo_aplicar numeric := 0;
	cargo_original numeric := 0;
	monto_modificado boolean := false;
	cantidad_aplicar integer := 1;
	existe_registro boolean := false;
	retorno integer := null;
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
	id_balance_alumno integer;
	existe_cargo boolean := false;
	proceder_insert boolean := true;
							
BEGIN    
	raise notice 'AGREGAR CARGO';	
	fecha_current := getDate('');
	
	select * from co_alumno where id = id_alumno INTO alumno_record;		
		
	select * from co_balance_alumno where id = alumno_record.co_balance_alumno and eliminado = false 
			INTO balance_record;
	
	IF FOUND THEN
		SELECT cargo.nombre,cargo.descripcion,cargo.precio,cargo.escribir_monto,sistema
		FROM cat_cargo cargo 
		WHERE cargo.id = id_cargo
		INTO cargo_record;					
	
		-- nueva version
		raise notice ' iniciando validacion '; 
		
		CASE id_cargo 
			WHEN CARGO_MENSUALIDAD THEN
				raise notice 'Aplicando cargo de mensualidad ';					
				cargo_aplicar := alumno_record.costo_colegiatura;		
				IF fecha_cargo = null THEN
				    raise notice 'la fecha de la mensualidad es null ';
					proceder_insert = false;
				ELSE 
						raise notice 'proceder al insert';
						select true 
						from co_cargo_balance_alumno 
						where cat_cargo = CARGO_MENSUALIDAD AND co_balance_alumno = balance_record.id
													AND to_char(fecha::date,'MMYYYY') =  to_char(fecha_cargo,'MMYYYY')
													AND eliminado = false
						INTO existe_cargo;		
				
						raise notice 'el cargo de mensualidad existe ? %',existe_cargo;
						IF existe_cargo THEN
							proceder_insert = false;
						END IF;				
				END IF;				
				
			WHEN CARGO_INSCRIPCION THEN
					raise notice 'COSTO INSCRIPCION';
				    cargo_aplicar := alumno_record.costo_inscripcion;				 
			WHEN CARGO_HORA_EXTRA THEN				
					raise notice 'Cargo por hora extra, se toma el precio del catalogo';
					cargo_aplicar := cargo_record.precio;		
			ELSE 
					raise notice 'ningun cargo especial se toma el precio del catalogo' ;
					cargo_aplicar := cargo_record.precio;		
		END CASE;		
	
	
		-- registrar detalle					
		raise notice 'PROCEDER AL INSERRT %',proceder_insert;
		
		IF proceder_insert THEN 
		
			cargo_original := cargo_aplicar;	
			
			IF cargo_record.escribir_monto = true THEN		
				raise notice 'El monto del cargo es el monto del parametro';
				cargo_aplicar := monto; -- monto del parametro
				monto_modificado := (cargo_original <> cargo_aplicar);
			END IF;
				--(getDate('')+getHora(''))::timestamp
				INSERT INTO co_cargo_balance_alumno(CO_BALANCE_ALUMNO,Cat_Cargo,FECHA,CANTIDAD,CARGO,
													TOTAL,NOTA,MONTO_MODIFICADO,MONTO_ORIGINAL,fecha_genero,GENERO)
				VALUES(
							balance_record.ID,
							id_cargo,
							fecha_cargo+getHora(''),
							cantidad,
							cargo_aplicar,
							(cargo_aplicar * cantidad),					
							nota,
							monto_modificado,
							cargo_original,
							(getDate('')+getHora(''))::timestamp,
							id_genero
				) RETURNING ID 
				INTO retorno;
		
				---actualizar total balance alumno Agregar cargos								
				UPDATE CO_BALANCE_ALUMNO
				SET TOTAL_CARGOS = (TOTAL_CARGOS + (cargo_aplicar * cantidad)),
					TOTAL_ADEUDO = (TOTAL_ADEUDO + (cargo_aplicar * cantidad))				
				where id = balance_record.id ;
		END IF;
	
	ELSE
		raise notice 'NO EXISTE EL BALANCE';
	
	END IF;		
--	retorno := true;
	return (select retorno);
END;
$function$
			



//** nueva version con cambios del procedimiento de agregar cargo

			
			
CREATE or replace FUNCTION registrar_cargo_mensualidad_alumnos() RETURNS VOID AS $$
DECLARE 
	alumno_loop RECORD;
	id_cat_cargo integer := 1;
	nota_cargo text := 'CARGO AUTOMÁTICO DE MENSUALIDAD ';
	cantidad integer := 1;
	id_genero integer :=1;
	nombre_mes text := '';
BEGIN  

	raise notice 'registrar cargo de mensualidad de alumnos.';

	  SELECT to_char((getDate('')+getHora(''))::timestamp, 'TMmon') INTO nombre_mes;
		nota_cargo := nota_cargo ||UPPER(nombre_mes)||'.';
		
		FOR alumno_loop IN ( 
			select * from co_alumno where eliminado = false
		) LOOP 
			raise notice 'Iniciando cargos de mensualidad aútomaticos, alumno % ',alumno_loop.nombre;		
			
			--fecha_cargo date,id_alumno integer, id_cargo integer, cantidad integer,monto numeric,nota text, id_genero integer
			PERFORM agregar_cargo_alumno(getDate(''),alumno_loop.id,id_cat_cargo,cantidad,alumno_loop.costo_colegiatura,nota_cargo,id_genero);					
			--agregar un item en la notificacion para enviar un mensaje al papa para que pase a pagar su mensualidad			
		END LOOP; 	
END;
$$ 
LANGUAGE 'plpgsql';





CREATE or replace FUNCTION generar_horas_extras_alumno(IN ids_alumnos_param text,ID_GENERO integer,OUT retorno boolean) 
	RETURNS boolean
 	LANGUAGE plpgsql 	
 AS
--do
$$
DECLARE
	asistencia RECORD;	
	hora_generate TIMESTAMP;	
	hora_inicio_hora_extra TIMESTAMP;	
	hora_fin_hora_extra TIMESTAMP;	
	fecha_current TIMESTAMP;	
	hora_extra_encontrada RECORD;
	INTERVALO_TIEMPO_HORA_EXTRA text := '1 hour';
	ID_HORA_EXTRA integer := 3;
	--ID_GENERO integer := 1;
	ID_PADRE integer := 1;
	ID_MADRE integer := 2;
	papas_record RECORD;	
	fallo boolean := false;
	mensaje_fallo text :='';
	token_familiar text := '';
	ids_alumnos integer[];
bEGIN
	IF ids_alumnos_param is null THEN		
		raise notice 'Es null la lista de alumnos param ';
		retorno := false;
	ELSE

		 ids_alumnos := string_to_array(ids_alumnos_param,','); 

		 raise notice ' Ids alumnos % ',ids_alumnos;

		FOR asistencia IN ( 
				select a.id as id_asistencia,
						a.co_alumno,
						a.fecha as fecha_entrada_asistencia,
						a.hora_entrada as hora_entrada_asistencia ,
						a.hora_salida as hora_salida_asistencia,
						alumno.minutos_gracia,
						alumno.nombre as nombre_alumno, 
						alumno.hora_salida as hora_salida_alumno,
						(alumno.hora_salida + interval '1 minute' * alumno.minutos_gracia) as hora_salida_mas_minutos_gracia_alumno
				from co_asistencia a inner join co_alumno alumno on a.co_alumno = alumno.id
				where a.co_alumno = ANY(ids_alumnos::INT[]) and a.fecha = getDate('') and a.hora_salida is not null and a.eliminado = false	
				order by a.hora_salida desc
				limit 1

		) LOOP 
			-- si hora de salida de asistencia es mayor a la hora salida registrada + minutos gracias
					IF asistencia.hora_salida_asistencia >= (asistencia.hora_salida_asistencia::date+asistencia.hora_salida_mas_minutos_gracia_alumno) THEN
					raise notice 'calcular horas extras alumno %',asistencia.nombre_alumno;
					FOR hora_generate IN ( 															
								SELECT * FROM generate_series((asistencia.hora_salida_asistencia::date + asistencia.hora_salida_alumno)::timestamp,
												asistencia.hora_salida_asistencia::timestamp,'1 hour')
							) 
					LOOP 	
						hora_inicio_hora_extra := hora_generate;
						hora_fin_hora_extra := (hora_generate + interval '1 hour');
						fecha_current := (getDate('')+getHora(''))::timestamp;
					
						raise notice 'validando la existencia de la hora extra INICIO %  FIN %',hora_inicio_hora_extra,hora_fin_hora_extra;
								select * from co_hora_extra he 
										where fecha::date = asistencia.fecha_entrada_asistencia
												--and co_asistencia = asistencia.id_asistencia
												and co_alumno = asistencia.co_alumno
												and hora_inicio = hora_inicio_hora_extra
												and hora_fin =  hora_fin_hora_extra
												and eliminado = false
								INTO hora_extra_encontrada;
						IF NOT FOUND THEN		
							raise notice 'SE PROCEDE A LA INSERCIÓN';
							/*
							14-nov-19 */
							--modificacion para no generar registros en la tabla co_hora_extra
							INSERT INTO CO_HORA_EXTRA (CO_ASISTENCIA,CO_ALUMNO,FECHA,HORA_INICIO,HORA_FIN,FECHA_GENERO,GENERO)
							VALUES(asistencia.id_asistencia,
									asistencia.co_alumno,
									fecha_current,
								  	hora_inicio_hora_extra,hora_fin_hora_extra,fecha_current,ID_GENERO);							
							
							--fecha date,id_alumno integer, id_cargo integer, cantidad integer,monto numeric,folio_mensualidad text,nota text, id_genero integer												
							PERFORM agregar_cargo_alumno(
														fecha_current,
														asistencia.co_alumno,
														ID_HORA_EXTRA,1,0,'',
														'Cargo por Tiempo Extra del '||fecha_current::date||', de '||hora_inicio_hora_extra::time||' a '||(hora_fin_hora_extra)::time||', alumno '
														||asistencia.nombre_alumno||'.'
														,ID_GENERO);
								
						--insertar en notificaciones
								FOR papas_record IN ( 			
										select rel.envio_avisos,rel.co_alumno,f.token,f.*
												from co_alumno_familiar rel inner join co_familiar f on rel.co_familiar = f.id
										where co_alumno = asistencia.co_alumno
												and rel.autorizado_para_entrega = true
												and rel.eliminado = false
												and f.eliminado = false
												and rel.co_parentesco in (ID_PADRE,ID_MADRE)  
												order by rel.co_parentesco desc  
								) LOOP				
										IF papas_record.token is null THEN
											fallo := true;
											mensaje_fallo := 'EL FAMILIAR NO CUENTA CON UN TOKEN. [ALUMNO '||asistencia.nombre_alumno||']';									
										ELSE
											token_familiar := papas_record.token;
										END IF;	
									
										INSERT INTO SI_NOTIFICACION (FECHA,TITULO,CUERPO,ICON,TOKEN,fallo,mensaje_fallo,FECHA_GENERO,GENERO)
											VALUES(fecha_current,											
														'Cargo por Tiempo Extra',
														'Cargo por Tiempo Extra del '||fecha_current::date||', de '||hora_inicio_hora_extra::time||' a '||(hora_fin_hora_extra)::time||', alumno '
														||asistencia.nombre_alumno||'.',
														'DEFAULT',
														token_familiar,
														fallo,
														mensaje_fallo,
														fecha_current,
														ID_GENERO);			
										raise notice 'INSERCION DE HORA EXTRA EXISTOSA';
								END LOOP;																							
						ELSE 
							raise notice 'YA EXISTE UN REGISTRO CON LAS HORAS EXPECIFICADAS, NO SE INSERTO';
						END IF;					
					
					  END LOOP;-- LOOP DE HORAS GENERADAS
				ELSE 
					raise notice 'SIN CALCULAR HORAS EXTRAS ';
												
				END IF; --END ASISTENCIA + HORA SALIDA						
			END LOOP;					
	END IF; --EN ALUMNOS NOT NULL		
	
	retorno:=true;
	
END; --END FUNCTION 
$$ 
