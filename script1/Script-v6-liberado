		
drop function agregar_cargo_alumno(id_alumno integer, id_cargo integer, cantidad integer, nota text, id_genero integer);

CREATE OR REPLACE FUNCTION public.agregar_cargo_alumno(id_alumno integer, id_cargo integer, cantidad integer, nota text, id_genero integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
	alumno_record RECORD;
	cargo_record RECORD;
	balance_record co_balance_alumno%ROWTYPE;
	fecha_current date;
	fecha_inicio date;
	cargo_monetario numeric;
	fecha_fin date;	
	_numero_anio int;
	_numero_mes int;	
	_nombre_mes text;	
	CARGO_MENSUALIDAD int := 1;
	CARGO_HORA_EXTRA int := 3;
	suma_total numeric;
	cargo_aplicar numeric := 0;
	cantidad_aplicar integer := 1;
	existe_registro boolean := false;
	retorno integer := null;
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
	id_balance_alumno integer;
	existe_cargo boolean := false;
	proceder_insert boolean := true;
	sqlInsertDetalle TEXT := 'INSERT INTO co_cargo_balance_alumno(CO_BALANCE_ALUMNO,Cat_Cargo,FECHA,CANTIDAD,CARGO,TOTAL,NOTA,GENERO)
							VALUES($1,$2,$3,$4,$5,$6,$7,$8)';								
BEGIN    
	raise notice 'AGREGAR CARGO';	
	fecha_current := getDate('');
		--balance alumno

	select * from co_alumno where id = id_alumno INTO alumno_record;		
		
	select * from co_balance_alumno where id = alumno_record.co_balance_alumno and eliminado = false 
			INTO balance_record;
			
	--IF balance_record is not null THEN
	IF FOUND THEN
		SELECT cargo.nombre,cargo.descripcion,cargo.precio
		FROM cat_cargo cargo 
		WHERE cargo.id = id_cargo
		INTO cargo_record;		
			
	
		--aplicar cargo
		IF id_cargo = CARGO_MENSUALIDAD THEN
			raise notice 'Aplicando cargo de mensualidad ';											
			cargo_aplicar := alumno_record.costo_colegiatura;					
		ELSE 
			IF id_cargo = CARGO_HORA_EXTRA THEN
				-- validar si existe la hora
				--select * from co_detalle_balance_alumno where cat_cargo = CARGO_HORA_EXTRA INTO 
				raise notice 'Cargo por hora extra';
				cargo_aplicar := cargo_record.precio;					
			ELSE 
				--Es un cargo de otra cosa
				raise notice 'Cargo generico';				
				cargo_aplicar := cargo_record.precio;			
			END IF;				
		END IF;
		
		--select to_char(getDate(''),'MMYYYY')
		
		-- registrar detalle				
		IF id_cargo = CARGO_MENSUALIDAD THEN
			    select true 
				from co_cargo_balance_alumno 
				where cat_cargo = CARGO_MENSUALIDAD AND co_balance_alumno = balance_record.id
													AND to_char(fecha::date,'MMYYYY') = to_char(getDate(''),'MMYYYY')
			INTO existe_cargo;		
			
			raise notice 'el cargo de mensualidad existe ? %',existe_cargo;
			IF existe_cargo THEN
				proceder_insert = false;
			END IF;			
		END IF;
		
		raise notice 'PROCEDER AL INSERRT %',proceder_insert;
		
		IF proceder_insert THEN 
		/*
				EXECUTE sqlInsertDetalle
					USING balance_record.ID,
							id_cargo,
							(getDate('')+getHora(''))::timestamp,
							cantidad,
							cargo_aplicar,
							(cargo_aplicar * cantidad),					
							nota,
							id_genero;	*/					
				INSERT INTO co_cargo_balance_alumno(CO_BALANCE_ALUMNO,Cat_Cargo,FECHA,CANTIDAD,CARGO,TOTAL,NOTA,GENERO)
				VALUES(
							balance_record.ID,
							id_cargo,
							(getDate('')+getHora(''))::timestamp,
							cantidad,
							cargo_aplicar,
							(cargo_aplicar * cantidad),					
							nota,
							id_genero
				) RETURNING ID 
				INTO retorno;
		
				---actualizar total balance alumno Agregar cargos								
				UPDATE CO_BALANCE_ALUMNO
				SET TOTAL_CARGOS = (TOTAL_CARGOS + (cargo_aplicar * cantidad)),
					TOTAL_ADEUDO = (TOTAL_ADEUDO + (cargo_aplicar * cantidad))				
				where id = balance_record.id ;
		END IF;
	
	ELSE
		raise notice 'NO EXISTE EL BALANCE';
	
	END IF;		
--	retorno := true;
	return (select retorno);
END;
$function$
			



		alter table configuracion add column mensaje_recordatorio_pago text;
		
		update configuracion set mensaje_recordatorio_pago = 'Se le recuerda que tiene cargos pendientes por pagar. ' where id = 1;
			



CREATE or replace FUNCTION registrar_entrada_alumno(IN ids_alumnos_param text,ID_GENERO integer) 
	RETURNS SETOF integer
 	LANGUAGE plpgsql 	
 AS
$$
DECLARE
	--ids_alumnos_param text := '2,4,5,6';
	ids_alumnos integer[];
	id_alumnos_horas_extras text;
	alumno_loop RECORD;
	id_alumno_loop integer;
	asistencia_alumno record;
	id_retorno integer;
BEGIN

	IF ids_alumnos_param is null THEN		
		raise notice 'Es null la lista de alumnos param ';
		--retorno := false;
	ELSE
		raise notice 'Iniciando';
		ids_alumnos := string_to_array(ids_alumnos_param,','); 	
		
		FOR alumno_loop IN ( 
				SELECT * 
				FROM co_alumno 
				WHERE ID = ANY(ids_alumnos::INT[]) and eliminado = false					
		) LOOP 
			raise notice 'alumno id %  nombre  %',alumno_loop.id,alumno_loop.nombre ;
			select * 
			from co_asistencia a 
			where a.co_alumno = alumno_loop.id 
					and hora_salida is null
					and a.eliminado = false 
			INTO asistencia_alumno;	
						
			IF NOT FOUND THEN
				raise notice 'no existe ningun registro de asistencia procede la operacion';
				INSERT INTO CO_ASISTENCIA(fecha,co_alumno,hora_entrada,usuario,genero)
				values(getDate(''),alumno_loop.id,(getDate('')+getHora(''))::timestamp,ID_GENERO,ID_GENERO)
				RETURNING id into id_retorno;
				--select array_append(array_retorno, alumno_loop.id);
				--raise notice 'lista se registrados %',array_retorno;
				return next id_retorno;								
			ELSE 
				raise notice 'Ya existe un registro de asistencia para el alumno id = %',asistencia_alumno.id;
			END IF;					
		END LOOP; 						
	END IF;	
	RETURN;	
END; --END FUNCTION 
$$ 



alter table configuracion add column link_descarga_app_ios text;

alter table configuracion add column url_facebook text;
alter table configuracion add column url_twitter text;
alter table configuracion add column url_pagina_oficial text;
alter table configuracion add column url_logo_correo_footer text;
alter table configuracion add column url_logo_correo_header text;

update configuracion set url_logo_correo_footer = 'https://firebasestorage.googleapis.com/v0/b/magic-ff92f.appspot.com/o/default%2Frecursos%2Fmagic_logo.png?alt=media&token=c77ded40-8e46-4b78-938c-bc2237e33a2c';
update configuracion set url_logo_correo_header = 'https://firebasestorage.googleapis.com/v0/b/magic-ff92f.appspot.com/o/default%2Frecursos%2FLogo_header_correo.png?alt=media&token=fcd9e376-824c-4380-a08b-befeb9bf8c1d';


update configuracion set url_facebook = 'https://www.facebook.com/MagicIntelligence';
update configuracion set url_twitter = 'www.twitter.com';
update configuracion set url_pagina_oficial = 'https://magicintelligence.com.com';



update configuracion set link_descarga_app_android = 'https://drive.google.com/open?id=1jnUwB_ly6z2BbjgTxrY4A_y5a57-rT1a';
            /*

            para mostrar los meses
            
            		select
		        al.co_sucursal,				
				to_char(cargo.fecha,'Mon-YYYY') as mes,
				to_char(cargo.fecha,'MMYYYY') as mes_anio,
			    count(cargo.*) as total,
                count(cargo.*) filter (where pagado) as pagados,
				count(cargo.*) filter (where pagado = false) as pendientes			    
        from co_cargo_balance_alumno cargo  inner join co_alumno al on al.co_balance_alumno = cargo.co_balance_alumno                
        where cargo.cat_cargo = 1 
         --   and al.co_sucursal = 1
           -- and to_char(cargo.fecha,'Mon-YYYY') = to_char(getDate(''),'Mon-YYYY') 
            and cargo.eliminado = false 
       group by al.co_sucursal,to_char(cargo.fecha,'Mon-YYYY'),to_char(cargo.fecha,'MMYYYY')
	   order by to_char(cargo.fecha,'MMYYYY') desc
	   
	   
            
            */

update co_alumno set foto = 'https://library.kissclipart.com/20180926/pe/kissclipart-student-clipart-utrecht-university-student-vu-univ-01ccd8efac8776f3.jpg';

alter table co_cargo_balance_alumno add column motivo_eliminacion text;			




---eliminar cargos


CREATE or replace FUNCTION eliminar_cargos_alumno(IN ids_cargos_param text,motivo text,ID_GENERO integer) 
RETURNS SETOF integer
LANGUAGE plpgsql 	
AS
$$
DECLARE 
	cargo_loop RECORD;		
	ids_cargos_eliminar integer[];		
	total_cargos_suma numeric := 0;
BEGIN  
		raise notice 'eliminar cargos '; 

	IF ids_cargos_param is null THEN		
		raise notice 'Es null la lista de alumnos param ';				
	ELSE
			ids_cargos_eliminar = string_to_array(ids_cargos_param,','); 	 		 
	 		raise notice 'cargos a eliminar %',ids_cargos_eliminar;	 	
			
			UPDATE CO_CARGO_BALANCE_ALUMNO 
            SET fecha_modifico = (getDate('')+getHora(''))::timestamp,
				motivo_eliminacion = motivo,
                modifico = ID_GENERO,
				eliminado = true	
        	WHERE id = ANY(ids_cargos_eliminar::INT[]);
				
		FOR cargo_loop IN ( 
			select * from co_cargo_balance_alumno where id = ANY(ids_cargos_eliminar::INT[])
		) LOOP 
					raise notice 'recalculando balance %  ',cargo_loop.co_balance_alumno;		
							
					select sum(total) 
					from co_cargo_balance_alumno 
					where co_balance_alumno =  cargo_loop.co_balance_alumno and eliminado = false
					INTO total_cargos_suma;
	
			raise notice 'total cargos %  ',total_cargos_suma;
				
			update co_balance_alumno 			
			SET total_adeudo = total_cargos_suma,			
				total_cargos = total_cargos_suma,
				fecha_modifico = (getDate('')+getHora(''))::timestamp,
				modifico = ID_GENERO
			where id = cargo_loop.co_balance_alumno;			
			
			return next cargo_loop.id;			
		END LOOP; 	
	
	END IF;
	RETURN;		
END;
$$ 
