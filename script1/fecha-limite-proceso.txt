
	SELECT 	   a.fecha_limite_pago_mensualidad,
		       a.nombre,
	        a.co_balance_alumno,
               b.id as id_cargo_balance_alumno,
               b.fecha,
               b.cantidad,
               cargo.nombre as nombre_cargo,
               b.texto_ayuda,
               cat_cargo as id_cargo,
               cargo.es_facturable,
               b.total as total,
               b.cargo,
               b.total_pagado,
               b.nota,
               b.pagado               
             FROM co_cargo_balance_alumno b inner join co_alumno a on b.co_balance_alumno = a.co_balance_alumno 
                                           inner join cat_cargo cargo on b.cat_cargo = cargo.id					
             WHERE a.co_sucursal =2
					and a.fecha_limite_pago_mensualidad < getDate('') 			
					and to_char(b.fecha,'mmYYYY') = to_char(getDate(''),'mmYYYY')
					and b.pagado = false
					and cargo.id = 1				
					and b.recargo = false	
					and b.eliminado = false 
					and a.eliminado = false					
             ORDER by a.nombre,b.fecha desc


--- para guardar los horarios de entrada salida de mises y de alumno --

alter table co_asistencia add horario_entrada timestamp;
alter table co_asistencia add horario_salida timestamp;

alter table co_asistencia_usuario add horario_entrada timestamp;
alter table co_asistencia_usuario add horario_salida timestamp;


alter table co_asistencia add column observaciones json;

--Actualizacion de datos existentes

  UPDATE CO_ASISTENCIA 
                     SET  horario_salida = (select (fecha+hora_salida) from co_alumno where id = co_alumno),			 
                          horario_entrada = (select (fecha+hora_entrada) from co_alumno where id = co_alumno),			 
                     	  modifico = 1


---- alteracion de functions

CREATE OR REPLACE FUNCTION registrar_entrada_alumno(ids_alumnos_param text, id_genero integer) RETURNS SETOF integer
 LANGUAGE plpgsql

    AS $$
DECLARE
--ULTIMA MODIFICACION : Se agrego que guarde la hora de entrada definida en la tabla alumno (, se incluyo que guardara el historico)
	--ids_alumnos_param text := '2,4,5,6';
	ids_alumnos integer[];
	id_alumnos_horas_extras text;
	alumno_loop RECORD;
	id_alumno_loop integer;
	asistencia_alumno record;
	id_retorno integer;
BEGIN

	IF ids_alumnos_param is null THEN		
		raise notice 'Es null la lista de alumnos param ';
		--retorno := false;
	ELSE
		raise notice 'Iniciando';
		ids_alumnos := string_to_array(ids_alumnos_param,','); 	
		
		FOR alumno_loop IN ( 
				SELECT * 
				FROM co_alumno 
				WHERE ID = ANY(ids_alumnos::INT[]) and eliminado = false					
		) LOOP 
			raise notice 'alumno id %  nombre  %',alumno_loop.id,alumno_loop.nombre ;
			select * 
			from co_asistencia a 
			where a.co_alumno = alumno_loop.id 
					and hora_salida is null
					and a.eliminado = false 
			INTO asistencia_alumno;	
			
			
			IF NOT FOUND THEN
				raise notice 'no existe ningun registro de asistencia procede la operacion';
				INSERT INTO CO_ASISTENCIA(fecha,co_alumno,hora_entrada,horario_entrada,usuario,genero)
				values(getDate(''),alumno_loop.id,(getDate('')+getHora(''))::timestamp,(getDate('')+alumno_loop.hora_entrada)::timestamp,ID_GENERO,ID_GENERO)
				RETURNING id into id_retorno;
				--select array_append(array_retorno, alumno_loop.id);
				--raise notice 'lista se registrados %',array_retorno;
				return next id_retorno;								
			ELSE 
				raise notice 'Ya existe un registro de asistencia para el alumno id = %',asistencia_alumno.id;
			END IF;					
		END LOOP; 						
	END IF;	
	RETURN;	
END; --END FUNCTION 
$$;
	


   





CREATE or replace FUNCTION registrar_salida_alumno(ids_asistencias_param text, ids_asistencias_calculo_horas_extras text, id_genero integer, OUT retorno boolean) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
--ULTIMA modificacion : 17 enero , se incluyo que guardara el historico del horario de salida de la tabla co_alumno
	ids_asistencias integer[];
	id_alumnos_horas_extras integer[];
	id_alumnos_calcular_horas_extras_param text;
BEGIN
	IF ids_asistencias_param is null THEN		
		raise notice 'Es null la lista de ids de asistencias param ';
		retorno := false;
	ELSE
		ids_asistencias := string_to_array(ids_asistencias_param,','); 
		id_alumnos_horas_extras := string_to_array(ids_asistencias_calculo_horas_extras,','); 
				
		UPDATE CO_ASISTENCIA 
                     SET hora_salida = (getDate('')+getHora(''))::timestamp,
			  horario_salida = (select (getDate('')+hora_salida) from co_alumno where id = co_alumno),
			 fecha_modifico = (getDate('')+getHora(''))::timestamp,
                     	  modifico = ID_GENERO
               WHERE id = ANY(ids_asistencias::INT[]);
		
		select string_agg(co_alumno::text,',') 
		from co_asistencia 
		where id = ANY(id_alumnos_horas_extras::INT[])
		INTO id_alumnos_calcular_horas_extras_param;				

		IF id_alumnos_calcular_horas_extras_param is not null THEN
		
			PERFORM generar_horas_extras_alumno(id_alumnos_calcular_horas_extras_param,ID_GENERO);		
		END IF;
			
	END IF;	
	retorno := true;
END; --END FUNCTION 
$$;




/* ************** modificaciones para el proceso de recargos  */

alter table co_cargo_balance_alumno add column co_cargo_balance_alumno integer;
ALTER TABLE co_cargo_balance_alumno ADD CONSTRAINT constraint_co_cargo_balance_alumno_fk FOREIGN KEY (co_cargo_balance_alumno) REFERENCES co_cargo_balance_alumno(id);

alter table co_cargo_balance_alumno add column recargo boolean default false;




//---template correo 

    alter table co_sucursal add column  encabeza_template_correo text;
             alter table co_sucursal add column  pie_template_correo text;