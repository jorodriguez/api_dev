

CREATE OR REPLACE FUNCTION public.agregar_cargo_alumno(id_alumno integer, id_cargo integer, cantidad integer, nota text, id_genero integer, OUT retorno boolean)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
DECLARE
	alumno_record RECORD;
	cargo_record RECORD;
	balance_record co_balance_alumno%ROWTYPE;
	fecha_current date;
	fecha_inicio date;
	cargo_monetario numeric;
	fecha_fin date;	
	_numero_anio int;
	_numero_mes int;	
	_nombre_mes text;	
	CARGO_MENSUALIDAD int := 1;
	CARGO_HORA_EXTRA int := 3;
	suma_total numeric;
	cargo_aplicar numeric := 0;
	cantidad_aplicar integer := 1;
	existe_registro boolean := false;
	retorno boolean := false;
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
	id_balance_alumno integer;
	existe_cargo boolean := false;
	proceder_insert boolean := true;
	sqlInsertDetalle TEXT := 'INSERT INTO co_cargo_balance_alumno(CO_BALANCE_ALUMNO,Cat_Cargo,FECHA,CANTIDAD,CARGO,TOTAL,NOTA,GENERO)
							VALUES($1,$2,$3,$4,$5,$6,$7,$8)';								
BEGIN    
	raise notice 'AGREGAR CARGO';	
	fecha_current := getDate('');
		--balance alumno

	select * from co_alumno where id = id_alumno INTO alumno_record;		
		
	select * from co_balance_alumno where id = alumno_record.co_balance_alumno and eliminado = false 
			INTO balance_record;
			
	--IF balance_record is not null THEN
	IF FOUND THEN
		SELECT cargo.nombre,cargo.descripcion,cargo.precio
		FROM cat_cargo cargo 
		WHERE cargo.id = id_cargo
		INTO cargo_record;		
		
		
	
		--aplicar cargo
		IF id_cargo = CARGO_MENSUALIDAD THEN
			raise notice 'Aplicando cargo de mensualidad ';											
			cargo_aplicar := alumno_record.costo_colegiatura;					
		ELSE 
			IF id_cargo = CARGO_HORA_EXTRA THEN
				-- validar si existe la hora
				--select * from co_detalle_balance_alumno where cat_cargo = CARGO_HORA_EXTRA INTO 
				raise notice 'Cargo por hora extra';
					cargo_aplicar := cargo_record.precio;					
			ELSE 
				--Es un cargo de otra cosa
				raise notice 'Cargo generico';				
					cargo_aplicar := cargo_record.precio;
			
			END IF;				
		END IF;
		-- registrar detalle				
		IF id_cargo = CARGO_MENSUALIDAD THEN
			select true from co_cargo_balance_alumno where cat_cargo = CARGO_MENSUALIDAD AND co_balance_alumno = balance_record.id 
			INTO existe_cargo;		
			raise notice 'el cargo de mensualidad existe ? %',existe_cargo;
			IF existe_cargo THEN
				proceder_insert = false;
			END IF;			
		END IF;
		
		raise notice 'PROCEDER AL INSERRT %',proceder_insert;
		
		IF proceder_insert THEN 
		
				EXECUTE sqlInsertDetalle
					USING balance_record.ID,
							id_cargo,
							(getDate('')+getHora(''))::timestamp,
							cantidad_aplicar,
							cargo_aplicar,
							(cargo_aplicar * cantidad_aplicar),					
							nota,
							id_genero;						
		
				---actualizar total balance alumno Agregar cargos								
				UPDATE CO_BALANCE_ALUMNO
				SET TOTAL_CARGOS = (TOTAL_CARGOS + (cargo_aplicar * cantidad_aplicar)),
					TOTAL_ADEUDO = (TOTAL_ADEUDO + (cargo_aplicar * cantidad_aplicar))				
				where id = balance_record.id ;		
		END IF;
	
	ELSE
		raise notice 'NO EXISTE EL BALANCE';
	
	END IF;		
	retorno := true;
END;
$function$









CREATE OR REPLACE FUNCTION agregar_pago_alumno(ids_cargos text,cargos_desglose text, id_alumno integer, pago_param numeric, nota text, id_genero integer, OUT retorno boolean)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
DECLARE
	fecha_current timestamp;
	ids_cargos_relacionar integer[];
	cargos_desglose_relacionar numeric[];
	id_pago_balance_alumno integer;
	alumno_record RECORD;
	balance_record co_balance_alumno%ROWTYPE;
	retorno boolean := false;
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
	id_balance_alumno integer;
	ind int := 0;
	sqlInsertPago TEXT := 'INSERT INTO co_pago_balance_alumno(CO_BALANCE_ALUMNO,FECHA,PAGO,NOTA,GENERO)
							VALUES($1,$2,$3,$4,$5) RETURNING id INTO id_pago';	
							
	sqlInsertRelacion TEXT := 'INSERT INTO co_pago_cargo_balance_alumno(fecha,co_pago_balance_alumno,co_cargo_balance_alumno,pago,genero)
							VALUES($1,$2,$3,$4,$5)';		
							

BEGIN    

	raise notice 'REGISTRAR PAGOS';	
	
	 ids_cargos_relacionar = string_to_array(ids_cargos,','); 
	 cargos_desglose_relacionar =  string_to_array(cargos_desglose,',');
	 
	 raise notice 'cargos a relacionar %',ids_cargos_relacionar;
	 raise notice 'cargos desglose a relacionar %',cargos_desglose_relacionar;
	 
	fecha_current := getDate('');	
	select * from co_alumno where id = id_alumno INTO alumno_record;		
		
	select * from co_balance_alumno where id = alumno_record.co_balance_alumno and eliminado = false 
			INTO balance_record;
	
	raise notice 'pass 1';			
	--IF balance_record is not null THEN
	IF FOUND THEN			
		fecha_current := ((getDate('')+getHora(''))::timestamp);							
				INSERT INTO co_pago_balance_alumno(CO_BALANCE_ALUMNO,FECHA,PAGO,NOTA,GENERO)
							VALUES(balance_record.ID,fecha_current,pago_param,nota,id_genero) 
				RETURNING id INTO id_pago_balance_alumno;
									
				raise notice 'id_pago_balance insertartado %',id_pago_balance_alumno;
				raise notice 'pass 2';
				---actualizar total balance alumno Agregar cargos								
				UPDATE co_balance_alumno 
					SET TOTAL_PAGOS = (TOTAL_PAGOS + pago_param),
						TOTAL_ADEUDO = (TOTAL_ADEUDO - pago_param)				
				where id = balance_record.id;		
				
			raise notice 'se registro el pago ';
			raise notice 'relacionar ';
			
			FOR i IN 1 .. array_upper(ids_cargos_relacionar, 1)
   			LOOP
			  --co_pago_cargo_balance_alumno(fecha,co_pago_balance_alumno,co_cargo_balance_alumno,pago,genero)
						
      				RAISE NOTICE 'relacionando id_cargo % id_pago % cantidad %',ids_cargos_relacionar[i],id_pago_balance_alumno,cargos_desglose_relacionar[i];
					EXECUTE sqlInsertRelacion 
						USING fecha_current,
								id_pago_balance_alumno,
							    ids_cargos_relacionar[i],
								cargos_desglose_relacionar[i],								
								id_genero;		
					raise notice 'guardado..';			
					
					--actualizar total en cargo
					UPDATE co_cargo_balance_alumno
					SET TOTAL_PAGADO = (TOTAL_PAGADO + cargos_desglose_relacionar[i]),
						TOTAL = (TOTAL - cargos_desglose_relacionar[i]),
						pagado = ((TOTAL - cargos_desglose_relacionar[i]) = 0)
						--PAGADO = ( (TOTAL - cargos_desglose_relacionar[i]) = 0 ) 						
					WHERE id = ids_cargos_relacionar[i];		
					raise notice 'total actualizado..';									
					
   			END LOOP;
			
	ELSE
		raise notice 'NO EXISTE EL BALANCE';
	
	END IF;		
	retorno := true;
END;
$function$





CREATE or replace FUNCTION generar_horas_extras(OUT retorno boolean) 
	RETURNS boolean
 	LANGUAGE plpgsql
 AS 
--do
$$
DECLARE
	item RECORD;	
	hora TIMESTAMP;
	hora_inicio_generate timestamp;
	ID_HORA_EXTRA integer := 3;
	ID_GENERO integer := 1;
	papas_record RECORD;
	fallo boolean := false;
	mensaje_fallo text :='';
	token_familiar text := '';
BEGIN    
	raise notice 'INICIANDO GENERACION DE HORAS EXTRAS';
			
	fOR item IN ( 
			WITH asistencias AS(
				select a.id as id_asistencia,
						a.co_alumno,
						a.fecha as fecha_entrada_asistencia,
		    			a.hora_entrada as hora_entrada_asistencia ,
						a.hora_salida,
						(select hora_inicio from co_hora_extra where co_asistencia = a.id order by hora_fin desc limit 1) as hora_inicio_hora_extra,
						(select hora_fin from co_hora_extra where co_asistencia = a.id order by hora_fin desc limit 1) as hora_fin_hora_extra						
				from co_asistencia 	a
				where a.hora_salida is null and a.eliminado = false	--a.fecha = getDate('') and 
			) select  
					CASE WHEN asis.hora_inicio_hora_extra is null THEN					
						(getDate('')+al.hora_salida)::timestamp
					ELSE asis.hora_inicio_hora_extra
					END AS hora_inicio_hora_extra_ultima,																
					
					CASE WHEN asis.hora_fin_hora_extra is null THEN					
						(getDate('')+al.hora_salida + interval '1 hour')::timestamp
					ELSE asis.hora_fin_hora_extra
					END AS hora_fin_hora_extra_ultima,																												
					
					CASE WHEN asis.hora_fin_hora_extra is null THEN					
						age((getDate('') +  (al.hora_salida + interval  '1 minute' * al.minutos_gracia))::timestamp,(getDate('') + getHora(''))::timestamp)
					ELSE 
						age(hora_fin_hora_extra,(getDate('') + getHora(''))::timestamp)
					END 
						AS diferencia,			
											
					(asis.hora_fin_hora_extra is  null) as no_existe_registro_hora_extra,
					(al.hora_salida + interval  '1 minute' * al.minutos_gracia) as hora_salida_limite,												
					al.id as id_alumno,
					al.nombre as nombre_alumno,					
					asis.*
			from co_alumno al inner join asistencias asis on al.id = asis.co_alumno
			where al.eliminado = false 
			order by diferencia desc											
		) LOOP 																		
				raise notice 'calcular horas de la hora salida a la hora actual ';							
				IF item.no_existe_registro_hora_extra THEN 
					hora_inicio_generate:=item.hora_inicio_hora_extra_ultima;
				ELSE
					hora_inicio_generate:=item.hora_fin_hora_extra_ultima;
				END IF;
					raise notice 'generando inserts de % a la hora actual ',hora_inicio_generate;
					FOR hora IN ( 
							SELECT * FROM generate_series(hora_inicio_generate, (getDate('')+getHora(''))::timestamp, '1 hour')
					) LOOP 	
						raise notice ' hora para insertar de % a % ',hora,(hora+ interval '1 hour');
							INSERT INTO CO_HORA_EXTRA (CO_ASISTENCIA,FECHA,HORA_INICIO,HORA_FIN,FECHA_GENERO,GENERO)
							VALUES(item.id_asistencia,((getDate('')+getHora(''))::timestamp),hora, (hora+ interval '1 hour'),((getDate('')+getHora(''))::timestamp),ID_GENERO);
							-- generar cargos
							--id_alumno, cat_cargo, cantidad, nota, genero
							PERFORM agregar_cargo_alumno(item.id_alumno,ID_HORA_EXTRA,1,'Cargo por Hora Extra de '||hora||' a '||(hora+ interval '1 hour')||'.',ID_GENERO);
							-- insertar en la table de notificaciones
							select rel.envio_avisos,rel.co_alumno,f.token,f.*
									from co_alumno_familiar rel inner join co_familiar f on rel.co_familiar = f.id
									where co_alumno = item.id_alumno
									and rel.autorizado_para_entrega = true
									and rel.eliminado = false
									and f.eliminado = false
									and rel.co_parentesco in (1,2) INTO papas_record ;							
							IF FOUND THEN
								IF papas_record.token is null THEN
									fallo := true;
									mensaje_fallo := 'EL FAMILIAR NO CUENTA CON UN TOKEN. [ALUMNO '||item.nombre_alumno||']';									
								ELSE
									token_familiar := papas_record.token;
								END IF;																	
								
							ELSE
									fallo := true;
									mensaje_fallo := 'NO SE ENCONTRÓ UN FAMILIAR PARA EL ALUMNO '||item.nombre_alumno;									
							END IF;
							
							INSERT INTO SI_NOTIFICACION (FECHA,TITULO,CUERPO,ICON,TOKEN,fallo,mensaje_fallo,FECHA_GENERO,GENERO)
								VALUES( (getDate('')+getHora(''))::timestamp,											
											'Cargo por Hora Extra',
											'Cargo por Hora Extra del '||hora::date||', de '||hora::time||' a '||(hora+ interval '1 hour')::time||', alumno '
											||item.nombre_alumno||'.',
											'DEFAULT',
											token_familiar,
											fallo,
											mensaje_fallo,
											(getDate('')+getHora(''))::timestamp,
											1
										);
							
					END LOOP;					
  		END LOOP;   	
		retorno:=true;
	END;
$$ 









CREATE OR REPLACE FUNCTION silenciar_notificaciones(ids text,respuestas text,mensajesIds text, OUT retorno boolean)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
DECLARE	
	ids_notificaciones integer[];
	respuestasArray boolean[];
	mensajesIdsArray text[];

BEGIN    
		
	 raise notice 'NOTIFICAR FALSE ';	
	 ids_notificaciones = string_to_array(ids,','); 
	 respuestasArray = string_to_array(respuestas,','); 
	 mensajesIdsArray = string_to_array(mensajesIds,','); 
	  
	FOR i IN 1 .. array_upper(ids_notificaciones, 1)
   			LOOP					
				UPDATE SI_NOTIFICACION SET 	notificado =respuestasArray[i], 
										mensajeId = mensajesIdsArray[i],
										fecha_modifico = (getDate('')+getHora(''))::timestamp
										
				where id = ids_notificaciones[i];					
   			END LOOP;			
	
	retorno := true;
END;
$function$












//---------------------------------------------------





select generar_horas_extras()

*///modificado el dia 18 de jun


CREATE or replace FUNCTION generar_horas_extras(OUT retorno boolean) 
	RETURNS boolean
 	LANGUAGE plpgsql
 AS 
--do
$$
DECLARE
	item RECORD;	
	hora TIMESTAMP;
	hora_inicio_generate timestamp;
	ID_HORA_EXTRA integer := 3;
	ID_GENERO integer := 1;
	papas_record RECORD;
	fallo boolean := false;
	mensaje_fallo text :='';
	token_familiar text := '';
BEGIN    
	raise notice 'INICIANDO GENERACION DE HORAS EXTRAS';
			
	fOR item IN ( 
			WITH asistencias AS(
				select a.id as id_asistencia,
						a.co_alumno,
						a.fecha as fecha_entrada_asistencia,
		    			a.hora_entrada as hora_entrada_asistencia ,
						a.hora_salida,
						(select hora_inicio from co_hora_extra where co_asistencia = a.id order by hora_fin desc limit 1) as hora_inicio_hora_extra,
						(select hora_fin from co_hora_extra where co_asistencia = a.id order by hora_fin desc limit 1) as hora_fin_hora_extra						
				from co_asistencia 	a
				where a.hora_salida is null and a.eliminado = false	--a.fecha = getDate('') and 
			) select  
					CASE WHEN asis.hora_inicio_hora_extra is null THEN					
						(getDate('')+al.hora_salida)::timestamp
					ELSE asis.hora_inicio_hora_extra
					END AS hora_inicio_hora_extra_ultima,																
					
					CASE WHEN asis.hora_fin_hora_extra is null THEN					
						(getDate('')+al.hora_salida + interval '1 hour')::timestamp
					ELSE asis.hora_fin_hora_extra
					END AS hora_fin_hora_extra_ultima,																												
					
					CASE WHEN asis.hora_fin_hora_extra is null THEN					
						age((getDate('') +  (al.hora_salida + interval  '1 minute' * al.minutos_gracia))::timestamp,(getDate('') + getHora(''))::timestamp)
					ELSE 
						age(hora_fin_hora_extra,(getDate('') + getHora(''))::timestamp)
					END 
						AS diferencia,			
											
					(asis.hora_fin_hora_extra is  null) as no_existe_registro_hora_extra,
					(al.hora_salida + interval  '1 minute' * al.minutos_gracia) as hora_salida_limite,												
					al.id as id_alumno,
					al.nombre as nombre_alumno,					
					asis.*
			from co_alumno al inner join asistencias asis on al.id = asis.co_alumno
			where al.eliminado = false 
			order by diferencia desc											
		) LOOP 																		
				raise notice 'calcular horas de la hora salida a la hora actual ';							
				IF item.no_existe_registro_hora_extra THEN 
					hora_inicio_generate:=item.hora_inicio_hora_extra_ultima;
				ELSE
					hora_inicio_generate:=item.hora_fin_hora_extra_ultima;
				END IF;
					raise notice 'generando inserts de % a la hora actual ',hora_inicio_generate;
					FOR hora IN ( 
							SELECT * FROM generate_series(hora_inicio_generate, (getDate('')+getHora(''))::timestamp, '1 hour')
					) LOOP 	
						raise notice ' hora para insertar de % a % ',hora,(hora+ interval '1 hour');
							INSERT INTO CO_HORA_EXTRA (CO_ASISTENCIA,FECHA,HORA_INICIO,HORA_FIN,FECHA_GENERO,GENERO)
							VALUES(item.id_asistencia,((getDate('')+getHora(''))::timestamp),hora, (hora+ interval '1 hour'),((getDate('')+getHora(''))::timestamp),ID_GENERO);
							-- generar cargos
							--id_alumno, cat_cargo, cantidad, nota, genero
							PERFORM agregar_cargo_alumno(item.id_alumno,ID_HORA_EXTRA,1,'Cargo por Hora Extra de '||hora||' a '||(hora+ interval '1 hour')||'.',ID_GENERO);
							-- insertar en la table de notificaciones
							select rel.envio_avisos,rel.co_alumno,f.token,f.*
									from co_alumno_familiar rel inner join co_familiar f on rel.co_familiar = f.id
									where co_alumno = item.id_alumno
									and rel.autorizado_para_entrega = true
									and rel.eliminado = false
									and f.eliminado = false
									and rel.co_parentesco in (1,2)  order by rel.co_parentesco desc limit 1 INTO papas_record ;							
							IF FOUND THEN
								IF papas_record.token is null THEN
									fallo := true;
									mensaje_fallo := 'EL FAMILIAR NO CUENTA CON UN TOKEN. [ALUMNO '||item.nombre_alumno||']';									
								ELSE
									token_familiar := papas_record.token;
								END IF;																	
								
							ELSE
									fallo := true;
									mensaje_fallo := 'NO SE ENCONTRÓ UN FAMILIAR PARA EL ALUMNO '||item.nombre_alumno;									
							END IF;
							
							INSERT INTO SI_NOTIFICACION (FECHA,TITULO,CUERPO,ICON,TOKEN,fallo,mensaje_fallo,FECHA_GENERO,GENERO)
								VALUES( (getDate('')+getHora(''))::timestamp,											
											'Cargo por Hora Extra',
											'Cargo por Hora Extra del '||hora::date||', de '||hora::time||' a '||(hora+ interval '1 hour')::time||', alumno '
											||item.nombre_alumno||'.',
											'DEFAULT',
											token_familiar,
											fallo,
											mensaje_fallo,
											(getDate('')+getHora(''))::timestamp,
											1
										);
							
					END LOOP;					
  		END LOOP;   	
		retorno:=true;
	END;
$$ 



*///modificado el dia 18 de jun


CREATE or replace FUNCTION generar_horas_extras_alumno(IN ids_alumnos_param text,OUT retorno boolean) 
	RETURNS boolean
 	LANGUAGE plpgsql 	
 AS
--do
$$
DECLARE
	item RECORD;	
	hora TIMESTAMP;
	hora_inicio_generate timestamp;
	ID_HORA_EXTRA integer := 3;
	ID_GENERO integer := 1;
	papas_record RECORD;
	fallo boolean := false;
	mensaje_fallo text :='';
	token_familiar text := '';
	ids_alumnos integer[];
BEGIN    
	raise notice 'INICIANDO GENERACION DE HORAS EXTRAS POR ALUMNOS';

	IF ids_alumnos_param is null THEN
		-- es no null la lista de ids de los alumnos
		raise notice 'Es null la lista de alumnos param ';
	ELSE

	 ids_alumnos := string_to_array(ids_alumnos_param,','); 

	raise notice ' Ids alumnos % ',ids_alumnos;
			
	fOR item IN ( 
			WITH asistencias AS(
				select a.id as id_asistencia,
						a.co_alumno,
						a.fecha as fecha_entrada_asistencia,
						a.hora_entrada as hora_entrada_asistencia ,
						a.hora_salida,
						(select hora_inicio from co_hora_extra where co_asistencia = a.id order by hora_fin desc limit 1) as hora_inicio_hora_extra,
						(select hora_fin from co_hora_extra where co_asistencia = a.id order by hora_fin desc limit 1) as hora_fin_hora_extra						
				from co_asistencia a
				where a.co_alumno = ANY(ids_alumnos::INT[]) and a.fecha = getDate('') and a.hora_salida is not null and a.eliminado = false	
			) select  
					CASE WHEN asis.hora_inicio_hora_extra is null THEN					
						(getDate('')+al.hora_salida)::timestamp
					ELSE asis.hora_inicio_hora_extra
					END AS hora_inicio_hora_extra_ultima,																
					
					CASE WHEN asis.hora_fin_hora_extra is null THEN					
						(getDate('')+al.hora_salida + interval '1 hour')::timestamp
					ELSE asis.hora_fin_hora_extra
					END AS hora_fin_hora_extra_ultima,																												
					
					CASE WHEN asis.hora_fin_hora_extra is null THEN					
						age((getDate('') +  (al.hora_salida + interval  '1 minute' * al.minutos_gracia))::timestamp,(getDate('') + getHora(''))::timestamp)
					ELSE 
						age(hora_fin_hora_extra,(getDate('') + getHora(''))::timestamp)
					END 
						AS diferencia,			
											
					(asis.hora_fin_hora_extra is  null) as no_existe_registro_hora_extra,
					(al.hora_salida + interval  '1 minute' * al.minutos_gracia) as hora_salida_limite,												
					al.hora_salida,
					al.id as id_alumno,
					al.nombre as nombre_alumno,					
					asis.*
			from co_alumno al inner join asistencias asis on al.id = asis.co_alumno
			where al.eliminado = false 
			order by diferencia desc											
		) LOOP 																		
				raise notice 'calcular horas de la hora de entrada a la hora de salida del alumno ';							
				IF item.no_existe_registro_hora_extra THEN 
					hora_inicio_generate:=item.hora_inicio_hora_extra_ultima;					
				ELSE
					hora_inicio_generate:=item.hora_fin_hora_extra_ultima;					
				END IF;
					raise notice 'generando inserts de hora inicio % a la hora de salida % ',hora_inicio_generate,item.hora_salida;
					FOR hora IN ( 
							--SELECT * FROM generate_series(hora_inicio_generate, (getDate('')+getHora(''))::timestamp, '1 hour')
							SELECT * FROM generate_series(hora_inicio_generate, (getDate('') + item.hora_salida)::timestamp, '1 hour')
					) LOOP 	
						raise notice ' hora para insertar de % a % ',hora,(hora+ interval '1 hour');
							INSERT INTO CO_HORA_EXTRA (CO_ASISTENCIA,FECHA,HORA_INICIO,HORA_FIN,FECHA_GENERO,GENERO)
							VALUES(item.id_asistencia,((getDate('')+getHora(''))::timestamp),hora, (hora+ interval '1 hour'),((getDate('')+getHora(''))::timestamp),ID_GENERO);
							-- generar cargos
							--id_alumno, cat_cargo, cantidad, nota, genero
							PERFORM agregar_cargo_alumno(item.id_alumno,ID_HORA_EXTRA,1,'Cargo por Hora Extra de '||hora||' a '||(hora+ interval '1 hour')||'.',ID_GENERO);
							-- insertar en la table de notificaciones
							select rel.envio_avisos,rel.co_alumno,f.token,f.*
									from co_alumno_familiar rel inner join co_familiar f on rel.co_familiar = f.id
									where co_alumno = item.id_alumno
									and rel.autorizado_para_entrega = true
									and rel.eliminado = false
									and f.eliminado = false
									and rel.co_parentesco in (1,2)  order by rel.co_parentesco desc limit 1 INTO papas_record ;							
							IF FOUND THEN
								IF papas_record.token is null THEN
									fallo := true;
									mensaje_fallo := 'EL FAMILIAR NO CUENTA CON UN TOKEN. [ALUMNO '||item.nombre_alumno||']';									
								ELSE
									token_familiar := papas_record.token;
								END IF;																	
								
							ELSE
									fallo := true;
									mensaje_fallo := 'NO SE ENCONTRÓ UN FAMILIAR PARA EL ALUMNO '||item.nombre_alumno;									
							END IF;
							
							INSERT INTO SI_NOTIFICACION (FECHA,TITULO,CUERPO,ICON,TOKEN,fallo,mensaje_fallo,FECHA_GENERO,GENERO)
								VALUES( (getDate('')+getHora(''))::timestamp,											
											'Cargo por Hora Extra',
											'Cargo por Hora Extra del '||hora::date||', de '||hora::time||' a '||(hora+ interval '1 hour')::time||', alumno '
											||item.nombre_alumno||'.',
											'DEFAULT',
											token_familiar,
											fallo,
											mensaje_fallo,
											(getDate('')+getHora(''))::timestamp,
											1
										);

										
							
					END LOOP;					
  		END LOOP;   	
		retorno:=true;
		END IF;
	END;
$$ 


