
--- Datos de facturacion en alumno 

create table co_datos_facturacion(
	id serial not null primary key,	
	rfc text not null,	
	razon_social text not null,
	curp text not null,
	calle text not null,
	numero_exterior text not null,
	colonia text not null,
	ciudad text not null,
	municipio text not null,
	estado text not null,
	codigo_postal text not null,
	telefono_contacto text,
	correo_contacto text,	
	fecha_genero timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    fecha_modifico timestamp without time zone,
    genero integer NOT NULL,
    modifico integer,
    eliminado boolean NOT NULL DEFAULT false,
	 CONSTRAINT co_datos_facturaciongenero_fkey FOREIGN KEY (genero)
        REFERENCES usuario (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT co_datos_facturacion_modifico_fkey FOREIGN KEY (modifico)
        REFERENCES usuario (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);


alter table co_alumno add co_datos_facturacion integer;
alter table co_alumno add factura boolean not null default false;

alter table co_pago_cargo_balance_alumno add column folio_factura text;

alter table co_pago_balance_alumno add column IDENTIFICADOR_FACTURA text;


------- modificacion al procedimiento

drop function agregar_pago_alumno(text,text, integer,numeric, text, integer,integer);

CREATE OR REPLACE FUNCTION agregar_pago_alumno(ids_cargos text,cargos_desglose text, id_alumno integer,
											pago_param numeric, nota text,forma_pago_param integer,
											identificador_factura_param text,id_genero integer, 											
											OUT retorno boolean)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
DECLARE
	fecha_current timestamp;
	ids_cargos_relacionar integer[];
	cargos_desglose_relacionar numeric[];
	id_pago_balance_alumno integer;
	alumno_record RECORD;
	balance_record co_balance_alumno%ROWTYPE;
	retorno boolean := false;
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
	id_balance_alumno integer;
	ind int := 0;
	sqlInsertPago TEXT := 'INSERT INTO co_pago_balance_alumno(CO_BALANCE_ALUMNO,FECHA,PAGO,NOTA,GENERO)
							VALUES($1,$2,$3,$4,$5) RETURNING id INTO id_pago';	
							
	sqlInsertRelacion TEXT := 'INSERT INTO co_pago_cargo_balance_alumno(fecha,co_pago_balance_alumno,co_cargo_balance_alumno,pago,genero)
							VALUES($1,$2,$3,$4,$5)';		
							

BEGIN    

	raise notice 'REGISTRAR PAGOS';	
	
	 ids_cargos_relacionar = string_to_array(ids_cargos,','); 
	 cargos_desglose_relacionar =  string_to_array(cargos_desglose,',');
	 
	 raise notice 'cargos a relacionar %',ids_cargos_relacionar;
	 raise notice 'cargos desglose a relacionar %',cargos_desglose_relacionar;
	 
	fecha_current := getDate('');	
	select * from co_alumno where id = id_alumno INTO alumno_record;		
		
	select * from co_balance_alumno where id = alumno_record.co_balance_alumno and eliminado = false 
			INTO balance_record;
	
	raise notice 'pass 1';			
	--IF balance_record is not null THEN
	IF FOUND THEN				
		fecha_current := ((getDate('')+getHora(''))::timestamp);							
				INSERT INTO co_pago_balance_alumno(CO_BALANCE_ALUMNO,FECHA,PAGO,NOTA,CO_FORMA_PAGO,IDENTIFICADOR_FACTURA,GENERO)
							VALUES(balance_record.ID,fecha_current,pago_param,nota,forma_pago_param,identificador_factura_param, id_genero) 
				RETURNING id INTO id_pago_balance_alumno;
									
				raise notice 'id_pago_balance insertartado %',id_pago_balance_alumno;
				raise notice 'pass 2';
				---actualizar total balance alumno Agregar cargos								
				UPDATE co_balance_alumno 
					SET TOTAL_PAGOS = (TOTAL_PAGOS + pago_param),
						TOTAL_ADEUDO = (TOTAL_ADEUDO - pago_param)				
				where id = balance_record.id;		
				
			raise notice 'se registro el pago ';
			raise notice 'relacionar ';
			
			FOR i IN 1 .. array_upper(ids_cargos_relacionar, 1)
   			LOOP
			  --co_pago_cargo_balance_alumno(fecha,co_pago_balance_alumno,co_cargo_balance_alumno,pago,genero)
						
      				RAISE NOTICE 'relacionando id_cargo % id_pago % cantidad %',ids_cargos_relacionar[i],id_pago_balance_alumno,cargos_desglose_relacionar[i];
					EXECUTE sqlInsertRelacion 
						USING fecha_current,
								id_pago_balance_alumno,
							    ids_cargos_relacionar[i],
								cargos_desglose_relacionar[i],								
								id_genero;		
					raise notice 'guardado..';			
					
					--actualizar total en cargo
					UPDATE co_cargo_balance_alumno
					SET TOTAL_PAGADO = (TOTAL_PAGADO + cargos_desglose_relacionar[i]),
						TOTAL = (TOTAL - cargos_desglose_relacionar[i]),
						pagado = ((TOTAL - cargos_desglose_relacionar[i]) = 0)
						--PAGADO = ( (TOTAL - cargos_desglose_relacionar[i]) = 0 ) 						
					WHERE id = ids_cargos_relacionar[i];		
					raise notice 'total actualizado..';									
					
   			END LOOP;
			
	ELSE
		raise notice 'NO EXISTE EL BALANCE';
	
	END IF;		
	retorno := true;
END;
$function$


alter table co_forma_pago add column permite_factura boolean default false;

alter table cat_cargo add column es_facturable boolean default false;

update cat_cargo set es_facturable = true where id = 1;

update co_forma_pago set permite_factura = true where id in (2,3,4);




--------------------------------gasto ----------------------

CREATE TABLE cat_tipo_gasto
(
    id serial not null,
    nombre text not null,			
    fecha_genero timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    fecha_modifico timestamp without time zone,    
    genero integer NOT NULL,
    modifico integer,
    eliminado boolean NOT NULL DEFAULT false,
    CONSTRAINT cat_tipo_gasto_pkey PRIMARY KEY (id),
    CONSTRAINT cat_tipo_gasto_modifico_fkey FOREIGN KEY (modifico)
        REFERENCES usuario (id),        
    CONSTRAINT cat_tipo_gasto_genero_fkey FOREIGN KEY (genero)
        REFERENCES public.usuario (id)        
);


 CREATE TABLE co_gasto
(
    id serial not null,
	cat_tipo_gasto integer not null,    
	co_forma_pago integer not null,
	co_sucursal integer not null,
	fecha date not null,			
	gasto numeric not null, 	
	observaciones text not null,
    fecha_genero timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    fecha_modifico timestamp without time zone,
    genero integer NOT NULL,
    modifico integer,
    eliminado boolean NOT NULL DEFAULT false,	
    CONSTRAINT cat_gasto_pkey PRIMARY KEY (id),
    CONSTRAINT cat_gasto_modifico_fkey FOREIGN KEY (modifico)
        REFERENCES usuario (id),
    CONSTRAINT cat_gasto_genero_fkey FOREIGN KEY (genero)
        REFERENCES public.usuario (id),
	CONSTRAINT cat_gasto_tipo_cargo_fkey FOREIGN KEY (cat_tipo_gasto)
        REFERENCES cat_tipo_gasto (id),
	CONSTRAINT co_forma_pago_fkey FOREIGN KEY (co_forma_pago)
        REFERENCES co_forma_pago (id),
	CONSTRAINT co_sucursal_fkey FOREIGN KEY (co_sucursal)
        REFERENCES co_sucursal (id)
);
