
CREATE TABLE cat_genero
(
    id serial not null,
    nombre text NOT NULL,
    fecha_genero timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    fecha_modifico timestamp without time zone,
    genero integer NOT NULL,
    modifico integer,
    eliminado boolean NOT NULL DEFAULT false,   
    CONSTRAINT cat_genero_pkey PRIMARY KEY (id),
    CONSTRAINT cat_genero_fkey FOREIGN KEY (genero)
        REFERENCES public.usuario (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT cat_genero_modifico_fkey FOREIGN KEY (modifico)
        REFERENCES public.usuario (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);
insert into cat_genero(nombre,genero) values('Mujer',1),('Hombre',1),('Personalizado',1);
alter table co_familiar add column cat_genero integer;
ALTER TABLE co_familiar ADD CONSTRAINT cat_genero_constraint_fkey FOREIGN KEY (cat_genero) REFERENCES cat_genero(id);


alter table co_parentesco add column cat_genero_default integer;
ALTER TABLE co_parentesco ADD CONSTRAINT cat_genero_def_constraint_fkey FOREIGN KEY (cat_genero_default) REFERENCES cat_genero(id);


update co_parentesco set cat_genero_default = 2 where id = 1;
update co_parentesco set cat_genero_default = 1 where id = 2;
update co_parentesco set cat_genero_default = 2 where id = 3;
update co_parentesco set cat_genero_default = 1 where id = 4;
update co_parentesco set cat_genero_default = 2,nombre = 'TÃ­o' where id = 5; --update masculino
update co_parentesco set cat_genero_default = 2,nombre = 'Hermano' where id = 6; --update masculino
update co_parentesco set cat_genero_default = 2 where id = 7;
update co_parentesco set cat_genero_default = 1 where id = 8;
update co_parentesco set cat_genero_default = 1 where id = 9;

update co_familiar f
        set cat_genero = (																							
					select  			
     					parent.cat_genero_default
 					from co_familiar fam inner join co_alumno_familiar af on af.co_familiar = fam.id 
								  inner join co_parentesco parent on parent.id = af.co_parentesco
					where fam.id = f.id		
		)


alter table co_familiar alter column cat_genero set not null;


///emociones-----

CREATE TABLE cat_emocion
(
    id serial not null,
    nombre text NOT NULL,
	icono text not null,
	icono_active text not null,
    fecha_genero timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    fecha_modifico timestamp without time zone,
    genero integer NOT NULL,
    modifico integer,
    eliminado boolean NOT NULL DEFAULT false,   
    CONSTRAINT cat_emociones_pkey PRIMARY KEY (id),
    CONSTRAINT cat_emociones_fkey FOREIGN KEY (genero)
        REFERENCES public.usuario (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT cat_emociones_modifico_fkey FOREIGN KEY (modifico)
        REFERENCES public.usuario (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

		

CREATE TABLE co_emocion_actividad
(
    id serial not null,
    cat_emocion integer not null,
	co_registro_actividad integer not null,
	co_familiar integer not null,
    fecha_genero timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    fecha_modifico timestamp without time zone,
    genero integer NOT NULL,
    modifico integer,
    eliminado boolean NOT NULL DEFAULT false,   
    CONSTRAINT co_emocion_act_pkey PRIMARY KEY (id),
    CONSTRAINT co_emocion_act_fkey FOREIGN KEY (genero)
        REFERENCES public.usuario (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT co_emocion_act_modifico_fkey FOREIGN KEY (modifico)
        REFERENCES public.usuario (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
	CONSTRAINT co_emocion_act_emocion_fkey FOREIGN KEY (cat_emocion)
        REFERENCES public.cat_emocion (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
	CONSTRAINT co_emocion_act_actividad_fkey FOREIGN KEY (co_registro_actividad)
        REFERENCES public.co_registro_actividad (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
	CONSTRAINT co_emocion_act_familiar_fkey FOREIGN KEY (co_familiar)
        REFERENCES public.co_familiar (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);


    insert into cat_emocion (nombre,icono,icono_active, genero)
		values('','heart-o','heart',1);

    			
    alter table cat_emocion add column estilo json default '{"justifyContent": "center"}'::json;
	alter table cat_emocion add column estilo_active json default '{"justifyContent": "center"}'::json;


    update cat_emocion 
				set 
					estilo = '{"paddingHorizontal": 5,"justifyContent": "center","alignItems": "center","color": "#F1948A"}'::json,				
					estilo_active = '{"paddingHorizontal": 5,"justifyContent":"center","alignItems":"center","color": "#F1948A"}'::json			
	where id = 1		
				

        /*
        Query

        select 
		   r.fecha,
            date_trunc('minute',r.fecha+r.hora) as hora,
            date_trunc('minute',r.fecha+r.hora)::text as fecha_hora_text,
            ac.nombre as actividad,
            ac.icono as icono,
            tipo.nombre as tipo_actividad,
            sub.nombre as sub_actividad,
            r.nota,
            a.nombre as nombre_alumno,
            a.apellidos as apellidos_alumno,
            r.url_foto,
            r.id,			
			(count(ea.*) filter (where ea.co_familiar = 54 ) >= 1) as emocion_seleccionada_por_usuario,								
			case when ea.cat_emocion is null then	
			(
				select  array_to_json(
						array_agg(
							(								
									'{'||
									 '"seleccionada":"false"'||
									 ',"icono":"'||emoc.icono||'"'||
									 ',"icono_active":"'||emoc.icono_active||'"'||
									 ',"nombre":"'||emoc.nombre||'"'
									'}'																	
							)
						))
				from cat_emocion emoc where eliminado = false					
			) 
			else 
			(
				select  array_to_json(
						array_agg(
							(								
									'{'||
									 '"seleccionada":"'||(emoc.id = ea.cat_emocion)::text||'"'||
									 ',"icono":"'||emoc.icono||'"'||
									 ',"icono_active":"'||emoc.icono_active||'"'||
									',"nombre":"'||emoc.nombre||'"'
									'}'																	
							)
						))
				from cat_emocion emoc where eliminado = false		
			) 
			end	as emociones,			
			count(ea.*) as count_emociones_tocadas
            from co_registro_actividad r inner join cat_actividad ac on r.cat_actividad = ac.id 
                     left join cat_tipo_actividad tipo on r.cat_tipo_actividad = tipo.id
                     left join cat_sub_actividad sub on r.cat_sub_actividad = sub.id					 
					 left join co_emocion_actividad ea on ea.co_registro_actividad = r.id
								and ea.eliminado = false					 
                     inner join co_alumno a on r.co_alumno = a.id
            where co_alumno IN
                (select co_alumno from co_alumno_familiar where co_familiar = 54 and eliminado = false) 
                and a.eliminado = false				
                and fecha = getDate('')
			group by r.id,ac.id,tipo.nombre,sub.nombre,a.id,ea.id
            order by r.fecha,r.hora desc	
			
        
        */