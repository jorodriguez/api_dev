update cat_actividad set icono = 'cutlery' where id = 1;
update cat_actividad set icono = 'user-md' where id = 2;
update cat_actividad set icono = 'heart' where id = 3;
update cat_actividad set icono = 'newspaper-o' where id =4; --nota;
update cat_actividad set icono = 'info-circle' where id = 5; --incidente
update cat_actividad set icono = 'signing' where id = 6;
update cat_actividad set icono = 'magic' where id = 7;


-- columnas para permisos de mensajeria en la app
alter table co_familiar add column recibir_notificacion_actividad boolean default false;
alter table co_familiar add column recibir_notificacion_pagos boolean default false;
alter table co_familiar add column recibir_notificacion_avisos boolean default false;
alter table co_familiar add column token_mensajeria text;

--- Cambios de alumno familiar relacion para App
ALTER TABLE co_alumno_familiar ADD CONSTRAINT fk_co_familiar FOREIGN KEY (co_familiar) REFERENCES co_familiar (id) MATCH FULL;


----
	---contraseñas para enviar a clientes
CREATE TABLE random_pass
(
    id serial not null,
    pass text NOT NULL,
    fecha_genero timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    fecha_modifico timestamp without time zone,
    genero integer NOT NULL,
    modifico integer,
    eliminado boolean NOT NULL DEFAULT false,   
    CONSTRAINT random_pass_pkey PRIMARY KEY (id),
    CONSTRAINT random_pass_genero_fkey FOREIGN KEY (genero)
        REFERENCES public.usuario (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT random_pass_modifico_fkey FOREIGN KEY (modifico)
        REFERENCES public.usuario (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)


insert into random_pass(pass,genero)
		values('cuidados',1),('travesura',1),('bueno',1),('atento',1),('feliz',1),('felicidad',1),
				('aventura',1),('pelota',1),('papa',1),('mama',1),('patio',1),('buendia',1),('imaginacion',1)
				,('magic',1),('logro',1),('pintar',1),('amar',1),('tequiero',1),('deseo',1),('hijo',1),('magico',1),
				('sonrisa',1),('sonrie',1),('sonreir',1),('emocion',1),('atencion',1),('juguete',1),('imagina',1),
				('crear',1),('inteligente',1);





-- modificacion en el procedimiento para guardar pagos

drop function agregar_pago_alumno(text,text,integer,numeric,text,integer,text,integer );



CREATE OR REPLACE FUNCTION agregar_pago_alumno(ids_cargos text,cargos_desglose text, id_alumno integer,
											pago_param numeric, nota text,forma_pago_param integer,
											identificador_factura_param text,id_genero integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
	fecha_current timestamp;
	ids_cargos_relacionar integer[];
	cargos_desglose_relacionar numeric[];
	id_pago_balance_alumno integer;
	alumno_record RECORD;
	balance_record co_balance_alumno%ROWTYPE;
	retorno integer := 0;
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
	id_balance_alumno integer;
	ind int := 0;
	sqlInsertPago TEXT := 'INSERT INTO co_pago_balance_alumno(CO_BALANCE_ALUMNO,FECHA,PAGO,NOTA,GENERO)
							VALUES($1,$2,$3,$4,$5) RETURNING id INTO id_pago';	
							
	sqlInsertRelacion TEXT := 'INSERT INTO co_pago_cargo_balance_alumno(fecha,co_pago_balance_alumno,co_cargo_balance_alumno,pago,genero)
							VALUES($1,$2,$3,$4,$5)';		
							

BEGIN    

	raise notice 'REGISTRAR PAGOS';	
	
	 ids_cargos_relacionar = string_to_array(ids_cargos,','); 
	 cargos_desglose_relacionar =  string_to_array(cargos_desglose,',');
	 
	 raise notice 'cargos a relacionar %',ids_cargos_relacionar;
	 raise notice 'cargos desglose a relacionar %',cargos_desglose_relacionar;
	 
	fecha_current := getDate('');	
	select * from co_alumno where id = id_alumno INTO alumno_record;		
		
	select * from co_balance_alumno where id = alumno_record.co_balance_alumno and eliminado = false 
			INTO balance_record;
	
	raise notice 'pass 1';			
	--IF balance_record is not null THEN
	IF FOUND THEN				
		fecha_current := ((getDate('')+getHora(''))::timestamp);							
				INSERT INTO co_pago_balance_alumno(CO_BALANCE_ALUMNO,FECHA,PAGO,NOTA,CO_FORMA_PAGO,IDENTIFICADOR_FACTURA,GENERO)
							VALUES(balance_record.ID,fecha_current,pago_param,nota,forma_pago_param,identificador_factura_param, id_genero) 
				RETURNING id INTO id_pago_balance_alumno;
									
				raise notice 'id_pago_balance insertartado %',id_pago_balance_alumno;
				raise notice 'pass 2';
				---actualizar total balance alumno Agregar cargos								
				UPDATE co_balance_alumno 
					SET TOTAL_PAGOS = (TOTAL_PAGOS + pago_param),
						TOTAL_ADEUDO = (TOTAL_ADEUDO - pago_param)				
				where id = balance_record.id;		
				
			raise notice 'se registro el pago ';
			raise notice 'relacionar ';
			
			FOR i IN 1 .. array_upper(ids_cargos_relacionar, 1)
   			LOOP
			  --co_pago_cargo_balance_alumno(fecha,co_pago_balance_alumno,co_cargo_balance_alumno,pago,genero)
						
      				RAISE NOTICE 'relacionando id_cargo % id_pago % cantidad %',ids_cargos_relacionar[i],id_pago_balance_alumno,cargos_desglose_relacionar[i];
					EXECUTE sqlInsertRelacion 
						USING fecha_current,
								id_pago_balance_alumno,
							    ids_cargos_relacionar[i],
								cargos_desglose_relacionar[i],								
								id_genero;		
					raise notice 'guardado..';			
					
					--actualizar total en cargo
					UPDATE co_cargo_balance_alumno
					SET TOTAL_PAGADO = (TOTAL_PAGADO + cargos_desglose_relacionar[i]),
						TOTAL = (TOTAL - cargos_desglose_relacionar[i]),
						pagado = ((TOTAL - cargos_desglose_relacionar[i]) = 0)
						--PAGADO = ( (TOTAL - cargos_desglose_relacionar[i]) = 0 ) 						
					WHERE id = ids_cargos_relacionar[i];		
					raise notice 'total actualizado..';									
					
   			END LOOP;
			
	ELSE
		raise notice 'NO EXISTE EL BALANCE';
	
	END IF;		
	raise notice 'id_pago_balance_alumno %',id_pago_balance_alumno;
	
	return (select id_pago_balance_alumno);
END;
$function$



------
 
  update co_sucursal set direccion = 'Mallorca 21, Roma, 64700 Monterrey, N.L.' where id = 1;
  update co_sucursal set direccion = 'Gral. Jeronimo Treviño 613, Cabecera Municipal, Apodaca Centro, 66600 Cd Apodaca, N.L.' where id = 2;
  update co_sucursal set direccion = 'La Silla, Paseo las Americas 2455, Contry, 67173 Guadalupe, N.L.' where id = 3;
  
  
  
  ---
 alter table cat_cargo add column escribir_cantidad boolean default false not null;
  
    insert into cat_cargo(nombre,descripcion,precio,notificar,es_facturable,sistema,escribir_cantidad,genero)
  values('Uniforme','Uniforme completo.',600,true,false,true,true,1);
  


  -------------

  
CREATE OR REPLACE FUNCTION public.agregar_cargo_alumno(id_alumno integer, id_cargo integer, cantidad integer, nota text, id_genero integer)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
DECLARE
	alumno_record RECORD;
	cargo_record RECORD;
	balance_record co_balance_alumno%ROWTYPE;
	fecha_current date;
	fecha_inicio date;
	cargo_monetario numeric;
	fecha_fin date;	
	_numero_anio int;
	_numero_mes int;	
	_nombre_mes text;	
	CARGO_MENSUALIDAD int := 1;
	CARGO_HORA_EXTRA int := 3;
	suma_total numeric;
	cargo_aplicar numeric := 0;
	cantidad_aplicar integer := 1;
	existe_registro boolean := false;
	retorno boolean := false;
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
	id_balance_alumno integer;
	existe_cargo boolean := false;
	proceder_insert boolean := true;
	sqlInsertDetalle TEXT := 'INSERT INTO co_cargo_balance_alumno(CO_BALANCE_ALUMNO,Cat_Cargo,FECHA,CANTIDAD,CARGO,TOTAL,NOTA,GENERO)
							VALUES($1,$2,$3,$4,$5,$6,$7,$8)';								
BEGIN    
	raise notice 'AGREGAR CARGO';	
	fecha_current := getDate('');
		--balance alumno

	select * from co_alumno where id = id_alumno INTO alumno_record;		
		
	select * from co_balance_alumno where id = alumno_record.co_balance_alumno and eliminado = false 
			INTO balance_record;
			
	--IF balance_record is not null THEN
	IF FOUND THEN
		SELECT cargo.nombre,cargo.descripcion,cargo.precio
		FROM cat_cargo cargo 
		WHERE cargo.id = id_cargo
		INTO cargo_record;		
		
		
	
		--aplicar cargo
		IF id_cargo = CARGO_MENSUALIDAD THEN
			raise notice 'Aplicando cargo de mensualidad ';											
			cargo_aplicar := alumno_record.costo_colegiatura;					
		ELSE 
			IF id_cargo = CARGO_HORA_EXTRA THEN
				-- validar si existe la hora
				--select * from co_detalle_balance_alumno where cat_cargo = CARGO_HORA_EXTRA INTO 
				raise notice 'Cargo por hora extra';
					cargo_aplicar := cargo_record.precio;					
			ELSE 
				--Es un cargo de otra cosa
				raise notice 'Cargo generico';				
					cargo_aplicar := cargo_record.precio;
			
			END IF;				
		END IF;
		-- registrar detalle				
		IF id_cargo = CARGO_MENSUALIDAD THEN
			select true from co_cargo_balance_alumno where cat_cargo = CARGO_MENSUALIDAD AND co_balance_alumno = balance_record.id 
			INTO existe_cargo;		
			raise notice 'el cargo de mensualidad existe ? %',existe_cargo;
			IF existe_cargo THEN
				proceder_insert = false;
			END IF;			
		END IF;
		
		raise notice 'PROCEDER AL INSERRT %',proceder_insert;
		
		IF proceder_insert THEN 
		
				EXECUTE sqlInsertDetalle
					USING balance_record.ID,
							id_cargo,
							(getDate('')+getHora(''))::timestamp,
							cantidad,
							cargo_aplicar,
							(cargo_aplicar * cantidad),					
							nota,
							id_genero;						
		
				---actualizar total balance alumno Agregar cargos								
				UPDATE CO_BALANCE_ALUMNO
				SET TOTAL_CARGOS = (TOTAL_CARGOS + (cargo_aplicar * cantidad)),
					TOTAL_ADEUDO = (TOTAL_ADEUDO + (cargo_aplicar * cantidad))				
				where id = balance_record.id ;		
		END IF;
	
	ELSE
		raise notice 'NO EXISTE EL BALANCE';
	
	END IF;		
	retorno := true;
	return retorno;
END;
$function$