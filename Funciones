


CREATE or replace FUNCTION guardarFamiliar(IN 										
							 			nombre text,
										telefono text,
										fecha_nacimiento date,
										correo text,
										password text,
										celular text,
										religion text,
										nota_celebracion_dia text,
										genero integer
							,OUT retorno integer) AS $$
DECLARE
	id_familiar integer;		
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
BEGIN    
		raise notice 'Insertat familiar';
	    INSERT INTO co_familiar(nombre,
								telefono,
								fecha_nacimiento,
								correo,
								password,
								celular,
								religion,
								nota_celebracion_dia,
								genero)
		VALUES(nombre,telefono,fecha_nacimiento,correo,password,celular,religion,nota_celebracion_dia,genero)
		RETURNING ID INTO id_familiar;
	retorno := id_familiar;
END;
$$ 
LANGUAGE 'plpgsql';




CREATE or replace FUNCTION guardarAlumno(IN 
									co_sucursal integer,
    								co_grupo integer,
    								nombre text,
    							    apellidos text,
	    							nombre_carino text,    
	    							sexo character varying(15),
        							fecha_nacimiento date,
        							alergias text,
        							nota text,
        							hora_entrada time,
        							hora_salida time,
        							costo_inscripcion numeric,
        							costo_colegiatura numeric,    							
        							minutos_gracia integer,
        							foto text,	        							
									fecha_inscripcion date,
									fecha_reinscripcion date,         										    								    							
									genero integer
								,OUT retorno integer) AS $$
DECLARE
	id_alumno integer;	
	id_formato integer;	
	id_padre integer;	
	id_madre integer;	
	-- Para los mensajes de diagnostico de la base de datos
    -- en caso de ocurrir un error
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
BEGIN    

INSERT INTO CO_ALUMNO(
			co_sucursal,co_grupo,
            nombre,apellidos,fecha_nacimiento,nombre_carino,
            sexo,alergias,nota,
			hora_entrada,hora_salida,costo_inscripcion,costo_colegiatura,
            minutos_gracia,foto,fecha_inscripcion,fecha_reinscripcion,            
            genero
		)
VALUES(co_sucursal,co_grupo,
	   		nombre,apellidos,fecha_nacimiento,nombre_carino,
			sexo,alergias,nota,
	   		hora_entrada,hora_salida,costo_inscripcion,costo_colegiatura,
	   		minutos_gracia,foto,fecha_inscripcion,fecha_reinscripcion,
            genero) RETURNING id INTO id_alumno;

/* insertar inscripcion iniciar*/			

	raise notice 'insertar inscripcion iniciar';

INSERT INTO CO_FORMATO_INSCRIPCION(co_alumno,fecha_genero,genero)  
        VALUES(id_alumno,current_date,genero) RETURNING id INTO id_formato;
	
	raise notice 'modificar alumno - inscripcion';

/* actualizar registro de alumno*/
UPDATE CO_ALUMNO  SET co_formato_inscripcion = id_formato  WHERE id = id_alumno;

/* agregar liga de padres */
id_padre := (SELECT guardarFamiliar('','',null,'','','','','',genero));
id_madre := (SELECT guardarFamiliar('','',null,'','','','','',genero));

	UPDATE CO_ALUMNO  SET co_padre = id_padre,co_madre = id_madre WHERE id = id_alumno;

   retorno := id_alumno;

END;
$$ 
LANGUAGE 'plpgsql';








CREATE or replace FUNCTION modificar_formato_inscripcion(IN 
                _id integer,
                fecha_inscripcion date,
				id_servicio integer,
             	hermanos text,                          
             	estado_convivencia_padres text,             
             	direccion text,
             	resp_escuela_guarderia text,
             	resp_esperan_como_institucion text,    
             /*resp_circunstancia_especial_familia text,
             resp_participacion_padres text,
             estado_embarazo text,                  
             resp_embarazo_planeado text,            
             gateo text,                             
             edad_comienzo_caminar text,
             edad_comienzo_esfinteres  text,       
             edad_balbuceo text,                     
             primer_palabra_con_significado text,   
             primeras_senas text,                    
             enfermedades text,                      
             accidentes_graves text,                
             dificultad_fisica text,                
             uso_aparato  text,                     
             tipo_terapia_especial text,            
             comportamiento_generales text,         
             duerme_con text,                        
             resp_sieta text,                       
             resp_horario_sieta text,
             resp_promedio_horas_dueme text,         
             resp_numero_comidas_dia text,          
             resp_horas_tv text,                    
             resp_programas_favoritos text,          
             resp_actividades_fin_semana  text,     
             resp_habilidades text,                 
             informacion_adicional text,            
             nota_celebracion_dia   text,       
             resp_motivo_inscripcion text,   */
             modifico integer
                  ,OUT retorno integer) AS $$
DECLARE
      id_inscripcion integer;       
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
BEGIN    
            raise notice 'modificar  formato';
			
UPDATE CO_FORMATO_INSCRIPCION  SET  
             fecha_inscripcion                 = fecha_inscripcion,
			 co_servicio 						= id_servicio,
             hermanos                          = hermanos,                          
             estado_convivencia_padres         = estado_convivencia_padres,
             servicio_contratar                = servicio_contratar,
             horario_servicio                  = horario_servicio,                  
             direccion                         = direccion,
             resp_escuela_guarderia            =resp_escuela_guarderia,
             resp_esperan_como_institucion     =resp_esperan_como_institucion
			 
             /*resp_circunstancia_especial_familia =resp_circunstancia_especial_familia,
             resp_participacion_padres         = resp_participacion_padres,
             estado_embarazo                   = estado_embarazo,
             resp_embarazo_planeado            =resp_embarazo_planeado,
             gateo                             =gateo,
             edad_comienzo_caminar             =edad_comienzo_caminar,
             edad_comienzo_esfinteres          =edad_comienzo_esfinteres,
             edad_balbuceo                     =edad_balbuceo,
             primer_palabra_con_significado    =primer_palabra_con_significado,
             primeras_senas                    =primeras_senas,
             enfermedades                      =enfermedades,
             accidentes_graves                 =accidentes_graves,
             dificultad_fisica                 =dificultad_fisica,
             uso_aparato                       =uso_aparato,
             tipo_terapia_especial             =tipo_terapia_especial,
             comportamiento_generales          =comportamiento_generales,
             duerme_con                        =duerme_con,
             resp_sieta                        =resp_sieta,
             resp_horario_sieta                =resp_horario_sieta,
             resp_promedio_horas_dueme         =resp_promedio_horas_dueme,
             resp_numero_comidas_dia           =resp_numero_comidas_dia,
             resp_horas_tv                     =resp_horas_tv,
             resp_programas_favoritos          =resp_programas_favoritos,
             resp_actividades_fin_semana       =resp_actividades_fin_semana,
             resp_habilidades                  =resp_habilidades,
             informacion_adicional             =informacion_adicional,
             nota_celebracion_dia              =nota_celebracion_dia,
             resp_motivo_inscripcion           = nota_celebracion_dia     */         
             WHERE id = _id RETURNING id INTO id_inscripcion;
                  
      retorno := id_inscripcion;
END;
$$ 
LANGUAGE 'plpgsql';




CREATE or replace FUNCTION modificar_alumno(IN 
									id_alumno integer,
									co_grupo integer,
							 		nombre text,
                					apellidos text,
                					fecha_nacimiento date,
									telefono text,
                					alergias text,
                					nota text,
                					hora_entrada time,
                					hora_salida time,
                					costo_inscripcion numeric,
                					costo_colegiatura numeric,
                					minutos_gracia integer,
                					foto text,
                					fecha_inscripcion date,
									fecha_reinscripcion date,                					
                					nombre_carino text,
				                	sexo text,
									--
									id_formato integer,	
									id_servicio integer,
									hermanos text,		
									estado_convivencia_padres text,
									servicio_contratar text,
									direccion text,
									resp_escuela_guarderia text,
									resp_esperan_como_institucion text,
                					modifico integer									
							,OUT retorno integer) AS $$
DECLARE
	id_familiar integer;		
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
BEGIN    
		raise notice 'Insertat familiar';
	   
	   UPDATE CO_ALUMNO  
                SET
				nombre = nombre,
                apellidos =apellidos,
                fecha_nacimiento = fecha_nacimiento,
				telefono = telefono,
                alergias = alergias,
                nota = nota,
                hora_entrada = nora_entrada,
                hora_salida = hora_salida,
                costo_inscripcion = costo_inscripcion,
                costo_colegiatura = costo_colegiatura,
                minutos_gracia = minutos_gracia,
                foto= foto,
                fecha_inscripcion = fecha_inscripcion,
				fecha_reinscripcion = fecha_reinscripcion,
                co_grupo = co_grupo,
                nombre_carino = nombre_carino,
                sexo = sexo,
                modifico = genero
           WHERE id = id_alumno;			
		
----------------------------------
	--perform modificar_formato_inscripcion();
	
	
	select modificar_formato_inscripcion(id_formato,fecha_inscripcion,
										id_servicio,hermanos,estado_convivencia_padres,
										direccion,resp_escuela_guarderia,resp_esperan_como_institucion,
										genero);
	
	retorno := id_familiar;
END;
$$ 
LANGUAGE 'plpgsql';



CREATE or replace FUNCTION getTimestamp(IN zona text,OUT fecha date) AS $$
BEGIN    
	IF zona IS NULL OR zona = '' THEN
		zona := 'America/Monterrey';	    	
		select current_timestamp at time zone zona INTO fecha;		 
	END IF;
END;
$$ 
LANGUAGE 'plpgsql';




------

CREATE or replace FUNCTION iniciar_balance_mensual_alumnos(OUT retorno boolean) AS $$
DECLARE
	alumno_loop RECORD;
	fecha_current date;
	fecha_inicio date;
	fecha_fin date;	
	_numero_anio int;
	_numero_mes int;	
	_nombre_mes text;	
	existe_registro boolean := false;
	CARGO_MENSUALIDAD int := 1;
	retorno boolean := false;
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
	id_balance_alumno integer;
BEGIN    
	raise notice 'INICIANDO GENERACION DE BALANCE';
	-- obtener la fecha actual
	fecha_current := getDate('');
	select date_trunc('month', fecha_current)::date INTO fecha_inicio;	
	select (date_trunc('month',fecha_current) -'1sec' ::interval)::date  INTO fecha_fin;
	select date_part('month',getDate('')) INTO _numero_mes;
	select date_part('year',getDate('')) INTO _numero_anio;
	SELECT to_char(to_timestamp (4::text, 'MM'), 'TMmon') INTO _nombre_mes;
	
		raise notice 'Fecha %',fecha_current;
		
		raise notice 'Revisar registros de alumnos';		
		FOR alumno_loop IN ( 
			SELECT a.*
				FROM CO_ALUMNO  a
			WHERE a.ID NOT IN(
								SELECT CO_ALUMNO
								FROM CO_BALANCE_ALUMNO 
								where mes = _numero_mes and anio = _numero_anio and eliminado = false
			) AND a.fecha_inscripcion = fecha_current
  			AND a.eliminado = false
		) LOOP 		
			raise notice '/////////////////////////balance del alumno % fecha Ini % fecha Fin %////////////////////////////',alumno_loop.nombre,fecha_inicio,fecha_fin;
		
			INSERT INTO co_balance_alumno(co_alumno,fecha_inicio,fecha_fin,anio,mes,nombre_mes,total,pagado,genero,fecha_genero)
			values(alumno_loop.id,fecha_inicio,fecha_fin,_numero_anio,_numero_mes,_nombre_mes,0,false,1,(getDate('')+getHora(''))::timestamp) 
			RETURNING ID INTO id_balance_alumno;
			--Aplicar la mensualidad 
			raise notice 'Agregando cargo de mensualidad ';
			PERFORM agregar_cargo_alumno(id_balance_alumno,
										alumno_loop.id,
										CARGO_MENSUALIDAD,
										1,
										1);
			
  		END LOOP;   	
		retorno := true;
END;
$$ 
LANGUAGE 'plpgsql';




CREATE or replace FUNCTION agregar_cargo_alumno(IN id_balance integer, id_alumno integer,id_cargo integer ,cantidad integer ,nota text ,id_genero integer,OUT retorno boolean) AS $$
DECLARE
	alumno_record RECORD;
	cargo_record RECORD;
	balance_record RECORD;
	fecha_current date;
	fecha_inicio date;
	cargo_monetario numeric;
	fecha_fin date;	
	_numero_anio int;
	_numero_mes int;	
	_nombre_mes text;	
	CARGO_MENSUALIDAD int := 1;
	CARGO_HORA_EXTRA int := 3;
	suma_total numeric;
	cargo_aplicar numeric := 0;
	cantidad_aplicar integer := 1;
	existe_registro boolean := false;
	retorno boolean := false;
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
	id_balance_alumno integer;
	sqlInsertDetalle TEXT := 'INSERT INTO CO_DETALLE_BALANCE_ALUMNO(CO_BALANCE_ALUMNO,CAT_CARGO,FECHA,CANTIDAD,CARGO,TOTAL,NOTA,GENERO)
							VALUES($1,$2,$3,$4,$5,$6)';								
BEGIN    
	raise notice 'AGREGAR CARGO';	
	fecha_current := getDate('');
		--balance alumno
	select * from co_balance_alumno where id = id_balance and co_alumno = id_alumno and eliminado = false 
			INTO balance_record;
			
	IF balance_record is not null THEN
		SELECT tipo.afectacion, cargo.nombre,cargo.descripcion,cargo.precio
		FROM cat_cargo cargo inner join cat_tipo_cargo tipo on cargo.cat_tipo_cargo = tipo.id
		WHERE cargo.id = id_cargo
		INTO cargo_record;		
		
		select * from co_alumno where id = id_alumno INTO alumno_record;		
	
		--aplicar cargo
		IF id_cargo = CARGO_MENSUALIDAD THEN
			raise notice 'Aplicando cargo de mensualidad ';											
			cargo_aplicar := alumno_record.costo_colegiatura;					
		ELSE 
			IF id_cargo = CARGO_HORA_EXTRA THEN
				-- validar si existe la hora
				--select * from co_detalle_balance_alumno where cat_cargo = CARGO_HORA_EXTRA INTO 
				raise notice 'Cargo por hora extra';
					cargo_aplicar := cargo.precio;					
			ELSE 
				--Es un cargo de otra cosa
				raise notice 'Cargo generico';				
					cargo_aplicar := cargo.precio;
			
			END IF;				
		END IF;
		-- registrar detalle
		EXECUTE sqlInsertDetalle
			USING balance_record.ID,
					id_cargo,
					(getDate('')+getHora(''))::timestamp,
					cantidad_aplicar,
					cargo_aplicar,
					(cargo_aplicar * cantidad_aplicar),
					cargo_record.nombre,
					id_genero;						
		
		---actualizar total balance alumno
		IF cargo_record.AFECTACION = '+' THEN
			raise notice 'afectando pago';
			UPDATE co_balance_alumno 
			SET TOTAL_PAGOS = (TOTAL_PAGO + (cargo_aplicar * cantidad_aplicar)),
				TOTAL_ADEUDO = (TOTAL_ADEUDO - (cargo_aplicar * cantidad_aplicar))				
			where id = id_balance;					
		ELSE 
			UPDATE co_balance_alumno 
			SET TOTAL_CARGOS = (TOTAL_CARGOS + (cargo_aplicar * cantidad_aplicar)),
				TOTAL_ADEUDO = (TOTAL_ADEUDO + (cargo_aplicar * cantidad_aplicar))				
			where id = id_balance;		
		END IF;			
						
	END IF;		
	retorno := true;
END;
$$ 
LANGUAGE 'plpgsql';



CREATE or replace FUNCTION agregar_cargo_alumno(IN id_balance integer, id_alumno integer,id_cargo integer ,cantidad integer ,nota text ,id_genero integer,OUT retorno boolean) AS $$
DECLARE
	alumno_record RECORD;
	cargo_record RECORD;
	balance_record co_balance_alumno%ROWTYPE;
	fecha_current date;
	fecha_inicio date;
	cargo_monetario numeric;
	fecha_fin date;	
	_numero_anio int;
	_numero_mes int;	
	_nombre_mes text;	
	CARGO_MENSUALIDAD int := 1;
	CARGO_HORA_EXTRA int := 3;
	suma_total numeric;
	cargo_aplicar numeric := 0;
	cantidad_aplicar integer := 1;
	existe_registro boolean := false;
	retorno boolean := false;
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
	id_balance_alumno integer;
	sqlInsertDetalle TEXT := 'INSERT INTO CO_DETALLE_BALANCE_ALUMNO(CO_BALANCE_ALUMNO,CAT_CARGO,FECHA,CANTIDAD,CARGO,TOTAL,NOTA,GENERO)
							VALUES($1,$2,$3,$4,$5,$6,$7,$8)';								
BEGIN    
	raise notice 'AGREGAR CARGO';	
	fecha_current := getDate('');
		--balance alumno
	select * from co_balance_alumno where id = id_balance and co_alumno = id_alumno and eliminado = false 
			INTO balance_record;
			
	--IF balance_record is not null THEN
	IF FOUND THEN
		SELECT tipo.afectacion, cargo.nombre,cargo.descripcion,cargo.precio
		FROM cat_cargo cargo inner join cat_tipo_cargo tipo on cargo.cat_tipo_cargo = tipo.id
		WHERE cargo.id = id_cargo
		INTO cargo_record;		
		
		select * from co_alumno where id = id_alumno INTO alumno_record;		
	
		--aplicar cargo
		IF id_cargo = CARGO_MENSUALIDAD THEN
			raise notice 'Aplicando cargo de mensualidad ';											
			cargo_aplicar := alumno_record.costo_colegiatura;					
		ELSE 
			IF id_cargo = CARGO_HORA_EXTRA THEN
				-- validar si existe la hora
				--select * from co_detalle_balance_alumno where cat_cargo = CARGO_HORA_EXTRA INTO 
				raise notice 'Cargo por hora extra';
					cargo_aplicar := cargo.precio;					
			ELSE 
				--Es un cargo de otra cosa
				raise notice 'Cargo generico';				
					cargo_aplicar := cargo.precio;
			
			END IF;				
		END IF;
		-- registrar detalle		
		
		EXECUTE sqlInsertDetalle
			USING balance_record.ID,
					id_cargo,
					(getDate('')+getHora(''))::timestamp,
					cantidad_aplicar,
					cargo_aplicar,
					(cargo_aplicar * cantidad_aplicar),					
					nota,
					id_genero;						
		
		---actualizar total balance alumno
		IF cargo_record.AFECTACION = '+' THEN
			raise notice 'afectando pago';
			UPDATE co_balance_alumno 
			SET TOTAL_PAGOS = (TOTAL_PAGO + (cargo_aplicar * cantidad_aplicar)),
				TOTAL_ADEUDO = (TOTAL_ADEUDO - (cargo_aplicar * cantidad_aplicar))				
			where id = id_balance;					
		ELSE 
			UPDATE co_balance_alumno 
			SET TOTAL_CARGOS = (TOTAL_CARGOS + (cargo_aplicar * cantidad_aplicar)),
				TOTAL_ADEUDO = (TOTAL_ADEUDO + (cargo_aplicar * cantidad_aplicar))				
			where id = id_balance;		
		END IF;			
	
	
	ELSE
		raise notice 'NO EXISTE EL BALANCE';
	
	END IF;		
	retorno := true;
END;
$$ 
LANGUAGE 'plpgsql';



CREATE or replace FUNCTION iniciar_balance_mensual_alumnos(OUT retorno boolean) AS $$
DECLARE
	alumno_loop RECORD;
	fecha_current date;
	fecha_inicio date;
	fecha_fin date;	
	_numero_anio int;
	_numero_mes int;	
	_nombre_mes text;	
	existe_registro boolean := false;
	CARGO_MENSUALIDAD int := 1;
	retorno boolean := false;
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
	id_balance_alumno integer;
BEGIN    
	raise notice 'INICIANDO GENERACION DE BALANCE';
	-- obtener la fecha actual
	fecha_current := getDate('');
	select date_trunc('month', fecha_current)::date INTO fecha_inicio;	
	select (date_trunc('month',fecha_current) -'1sec' ::interval)::date  INTO fecha_fin;
	select date_part('month',getDate('')) INTO _numero_mes;
	select date_part('year',getDate('')) INTO _numero_anio;
	SELECT to_char(to_timestamp (4::text, 'MM'), 'TMmon') INTO _nombre_mes;
		
		raise notice 'Fecha %',fecha_current;
		
		raise notice 'Revisar registros de alumnos';	
		raise notice 'mes % anio %',_numero_mes,_numero_anio;	
		FOR alumno_loop IN ( 
			SELECT a.*
				FROM CO_ALUMNO  a
			WHERE a.ID NOT IN(
								SELECT CO_ALUMNO
								FROM CO_BALANCE_ALUMNO 
								where mes = _numero_mes and anio = _numero_anio and eliminado = false
			) AND date_part('month',a.fecha_inscripcion) = date_part('month',fecha_current)
				AND date_part('day',a.fecha_inscripcion) <= date_part('day',fecha_current)
  				AND a.eliminado = false
		) LOOP 		
			raise notice '/////////////////////////balance del alumno % fecha Ini % fecha Fin %////////////////////////////',alumno_loop.nombre,fecha_inicio,fecha_fin;
		
			INSERT INTO co_balance_alumno(co_alumno,fecha_inicio,fecha_fin,anio,mes,nombre_mes,total_adeudo,total_pagos,total_cargos,pagado,genero,fecha_genero)
			values(alumno_loop.id,fecha_inicio,fecha_fin,_numero_anio,_numero_mes,_nombre_mes,0,0,0,false,1,(getDate('')+getHora(''))::timestamp) 
			RETURNING ID INTO id_balance_alumno;
			--Aplicar la mensualidad 
			raise notice 'Agregando cargo de mensualidad al balance %',id_balance_alumno;
			PERFORM agregar_cargo_alumno(id_balance_alumno,
										alumno_loop.id,
										CARGO_MENSUALIDAD,
										1,
										'Cargo generado Automáticamente.',
										1);	
										
			--EXCEPTION
    		--	WHEN unique_violation THEN
        --		RAISE 'Email address % already registered', eml;
										
  		END LOOP;   	
		retorno := true;
END;
$$ 
LANGUAGE 'plpgsql';



CREATE or replace FUNCTION agregar_cargo_alumno(IN id_balance integer, id_alumno integer,id_cargo integer ,cantidad integer ,nota text ,id_genero integer,OUT retorno boolean) AS $$
DECLARE
	alumno_record RECORD;
	cargo_record RECORD;
	balance_record co_balance_alumno%ROWTYPE;
	fecha_current date;
	fecha_inicio date;
	cargo_monetario numeric;
	fecha_fin date;	
	_numero_anio int;
	_numero_mes int;	
	_nombre_mes text;	
	CARGO_MENSUALIDAD int := 1;
	CARGO_HORA_EXTRA int := 3;
	suma_total numeric;
	cargo_aplicar numeric := 0;
	cantidad_aplicar integer := 1;
	existe_registro boolean := false;
	retorno boolean := false;
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
	id_balance_alumno integer;
	existe_cargo boolean := false;
	proceder_insert boolean := true;
	sqlInsertDetalle TEXT := 'INSERT INTO CO_DETALLE_BALANCE_ALUMNO(CO_BALANCE_ALUMNO,CAT_CARGO,FECHA,CANTIDAD,CARGO,TOTAL,NOTA,GENERO)
							VALUES($1,$2,$3,$4,$5,$6,$7,$8)';								
BEGIN    
	raise notice 'AGREGAR CARGO';	
	fecha_current := getDate('');
		--balance alumno
	select * from co_balance_alumno where id = id_balance and co_alumno = id_alumno and eliminado = false 
			INTO balance_record;
			
	--IF balance_record is not null THEN
	IF FOUND THEN
		SELECT tipo.afectacion, cargo.nombre,cargo.descripcion,cargo.precio
		FROM cat_cargo cargo inner join cat_tipo_cargo tipo on cargo.cat_tipo_cargo = tipo.id
		WHERE cargo.id = id_cargo
		INTO cargo_record;		
		
		select * from co_alumno where id = id_alumno INTO alumno_record;		
	
		--aplicar cargo
		IF id_cargo = CARGO_MENSUALIDAD THEN
			raise notice 'Aplicando cargo de mensualidad ';											
			cargo_aplicar := alumno_record.costo_colegiatura;					
		ELSE 
			IF id_cargo = CARGO_HORA_EXTRA THEN
				-- validar si existe la hora
				--select * from co_detalle_balance_alumno where cat_cargo = CARGO_HORA_EXTRA INTO 
				raise notice 'Cargo por hora extra';
					cargo_aplicar := cargo.precio;					
			ELSE 
				--Es un cargo de otra cosa
				raise notice 'Cargo generico';				
					cargo_aplicar := cargo.precio;
			
			END IF;				
		END IF;
		-- registrar detalle				
		IF id_cargo = CARGO_MENSUALIDAD THEN
			select true from co_detalle_balance_alumno where cat_cargo = CARGO_MENSUALIDAD AND co_balance_alumno = balance_record.id 
			INTO existe_cargo;		
			raise notice 'el cargo de mensualidad existe ? %',existe_cargo;
			IF existe_cargo THEN
				proceder_insert = false;
			END IF;			
		END IF;
		
		raise notice 'PROCEDER AL INSERR ? %',proceder_insert;
		
		IF proceder_insert THEN 
		
				EXECUTE sqlInsertDetalle
					USING balance_record.ID,
							id_cargo,
							(getDate('')+getHora(''))::timestamp,
							cantidad_aplicar,
							cargo_aplicar,
							(cargo_aplicar * cantidad_aplicar),					
							nota,
							id_genero;						
		
				---actualizar total balance alumno
				IF cargo_record.AFECTACION = '+' THEN
					raise notice 'afectando pago';
					UPDATE co_balance_alumno 
					SET TOTAL_PAGOS = (TOTAL_PAGO + (cargo_aplicar * cantidad_aplicar)),
						TOTAL_ADEUDO = (TOTAL_ADEUDO - (cargo_aplicar * cantidad_aplicar))				
					where id = id_balance;					
				ELSE 
					UPDATE co_balance_alumno 
					SET TOTAL_CARGOS = (TOTAL_CARGOS + (cargo_aplicar * cantidad_aplicar)),
						TOTAL_ADEUDO = (TOTAL_ADEUDO + (cargo_aplicar * cantidad_aplicar))				
					where id = id_balance;		
				END IF;			
		END IF;
	
	ELSE
		raise notice 'NO EXISTE EL BALANCE';
	
	END IF;		
	retorno := true;
END;
$$ 
LANGUAGE 'plpgsql';



alter table cat_cargo drop column cat_tipo_cargo;
drop table cat_tipo_cargo;


CREATE or replace FUNCTION agregar_pago_alumno(IN id_balance integer,pago_param numeric ,nota text ,id_genero integer,OUT retorno boolean) AS $$
DECLARE
	fecha_current date;
	balance_record co_balance_alumno%ROWTYPE;
	retorno boolean := false;
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
	id_balance_alumno integer;
	sqlInsertPago TEXT := 'INSERT INTO co_pago_balance_alumno(CO_BALANCE_ALUMNO,FECHA,PAGO,NOTA,GENERO)
							VALUES($1,$2,$3,$4,$5)';								
BEGIN    
	raise notice 'AGREGAR PAGO';	
	fecha_current := getDate('');		
	select * from co_balance_alumno where id = id_balance and eliminado = false 
			INTO balance_record;
	raise notice 'pass 1';
			
	--IF balance_record is not null THEN
	IF FOUND THEN			
		
				EXECUTE sqlInsertPago
					USING balance_record.ID,							
							(getDate('')+getHora(''))::timestamp,
							pago_param,														
							nota,
							id_genero;						
		raise notice 'pass 2';
				---actualizar total balance alumno Agregar cargos								
				UPDATE co_balance_alumno 
					SET TOTAL_PAGOS = (TOTAL_PAGOS + pago_param),
						TOTAL_ADEUDO = (TOTAL_ADEUDO - pago_param)				
				where id = id_balance;		
			raise notice 'se registro el pago ';
	
	
	ELSE
		raise notice 'NO EXISTE EL BALANCE';
	
	END IF;		
	retorno := true;
END;
$$ 
LANGUAGE 'plpgsql';














________________________


CREATE or replace FUNCTION agregar_cargo_alumno(IN id_alumno integer, id_cargo integer ,cantidad integer ,nota text ,id_genero integer,OUT retorno boolean) AS $$
DECLARE
	alumno_record RECORD;
	cargo_record RECORD;
	balance_record co_balance_alumno%ROWTYPE;
	fecha_current date;
	fecha_inicio date;
	cargo_monetario numeric;
	fecha_fin date;	
	_numero_anio int;
	_numero_mes int;	
	_nombre_mes text;	
	CARGO_MENSUALIDAD int := 1;
	CARGO_HORA_EXTRA int := 3;
	suma_total numeric;
	cargo_aplicar numeric := 0;
	cantidad_aplicar integer := 1;
	existe_registro boolean := false;
	retorno boolean := false;
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
	id_balance_alumno integer;
	existe_cargo boolean := false;
	proceder_insert boolean := true;
	sqlInsertDetalle TEXT := 'INSERT INTO co_cargo_balance_alumno(CO_BALANCE_ALUMNO,Cat_Cargo,FECHA,CANTIDAD,CARGO,TOTAL,NOTA,GENERO)
							VALUES($1,$2,$3,$4,$5,$6,$7,$8)';								
BEGIN    
	raise notice 'AGREGAR CARGO';	
	fecha_current := getDate('');
		--balance alumno

	select * from co_alumno where id = id_alumno INTO alumno_record;		
		
	select * from co_balance_alumno where id = alumno_record.co_balance_alumno and eliminado = false 
			INTO balance_record;
			
	--IF balance_record is not null THEN
	IF FOUND THEN
		SELECT cargo.nombre,cargo.descripcion,cargo.precio
		FROM cat_cargo cargo 
		WHERE cargo.id = id_cargo
		INTO cargo_record;		
		
		
	
		--aplicar cargo
		IF id_cargo = CARGO_MENSUALIDAD THEN
			raise notice 'Aplicando cargo de mensualidad ';											
			cargo_aplicar := alumno_record.costo_colegiatura;					
		ELSE 
			IF id_cargo = CARGO_HORA_EXTRA THEN
				-- validar si existe la hora
				--select * from co_detalle_balance_alumno where cat_cargo = CARGO_HORA_EXTRA INTO 
				raise notice 'Cargo por hora extra';
					cargo_aplicar := cargo_record.precio;					
			ELSE 
				--Es un cargo de otra cosa
				raise notice 'Cargo generico';				
					cargo_aplicar := cargo_record.precio;
			
			END IF;				
		END IF;
		-- registrar detalle				
		IF id_cargo = CARGO_MENSUALIDAD THEN
			select true from co_cargo_balance_alumno where cat_cargo = CARGO_MENSUALIDAD AND co_balance_alumno = balance_record.id 
			INTO existe_cargo;		
			raise notice 'el cargo de mensualidad existe ? %',existe_cargo;
			IF existe_cargo THEN
				proceder_insert = false;
			END IF;			
		END IF;
		
		raise notice 'PROCEDER AL INSERRT %',proceder_insert;
		
		IF proceder_insert THEN 
		
				EXECUTE sqlInsertDetalle
					USING balance_record.ID,
							id_cargo,
							(getDate('')+getHora(''))::timestamp,
							cantidad_aplicar,
							cargo_aplicar,
							(cargo_aplicar * cantidad_aplicar),					
							nota,
							id_genero;						
		
				---actualizar total balance alumno Agregar cargos								
				UPDATE CO_BALANCE_ALUMNO
				SET TOTAL_CARGOS = (TOTAL_CARGOS + (cargo_aplicar * cantidad_aplicar)),
					TOTAL_ADEUDO = (TOTAL_ADEUDO + (cargo_aplicar * cantidad_aplicar))				
				where id = balance_record.id ;		
		END IF;
	
	ELSE
		raise notice 'NO EXISTE EL BALANCE';
	
	END IF;		
	retorno := true;
END;
$$ 
LANGUAGE 'plpgsql';






CREATE or replace FUNCTION insertar_balance_alumno(IN id_alumno INTEGER,id_genero integer,OUT retorno boolean) AS $$
DECLARE
	alumno_record RECORD;
	existe_registro boolean := false;
	CARGO_MENSUALIDAD int := 1;
	retorno boolean := false;
	sqlerr_message_text TEXT;
	sqlerr_exception_detail TEXT;
	sqlerr_exception_hint TEXT;
	id_balance_alumno integer;
BEGIN    

	raise notice 'INSERTAR BALANCE DEL ALUMNO ';
		--validar si existe el alumno y la relacion con un balance
		select * from co_alumno where id = id_alumno and eliminado = false INTO alumno_record;
		IF FOUND THEN 
			IF alumno_record.co_balance_alumno IS NULL THEN 
	
			INSERT INTO co_balance_alumno(total_adeudo,total_pagos,total_cargos,genero,fecha_genero)
			values(0,0,0,id_genero,(getDate('')+getHora(''))::timestamp) 
			RETURNING ID INTO id_balance_alumno;
			--actualizar el alumno 
			--Aplicar la mensualidad 
			raise notice 'Se inserto el registro ';

			UPDATE CO_ALUMNO SET CO_BALANCE_ALUMNO = id_balance_alumno WHERE ID = id_alumno;
			raise notice 'se relaciono con el nuevo registro';

			/*raise notice 'Agregando cargo de mensualidad al balance %',id_balance_alumno;
			PERFORM agregar_cargo_alumno(id_balance_alumno,
										alumno_loop.id,
										CARGO_MENSUALIDAD,
										1,
										'Cargo generado Automáticamente.',
										1);	
			*/	
			ELSE RAISE NOTICE 'EL ALUMNO YA TIENE UN BALANCE CREADO';
			END IF;
		ELSE 
			RAISE NOTICE 'NO SE ENCUENTRA EL ALUMNO ';
		END IF;
		
								
		retorno := true;
END;
$$ 
LANGUAGE 'plpgsql';




DROP FUNCTION agregar_pago_alumno(integer,numeric,text,integer)


CREATE or replace FUNCTION agregar_pago_alumno(IN id_alumno integer,pago_param numeric ,nota text ,id_genero integer,OUT retorno boolean) AS $$
DECLARE
	fecha_current date;
	alumno_record RECORD;
	balance_record co_balance_alumno%ROWTYPE;
	retorno boolean := false;
    sqlerr_message_text TEXT;
    sqlerr_exception_detail TEXT;
    sqlerr_exception_hint TEXT;
	id_balance_alumno integer;
	sqlInsertPago TEXT := 'INSERT INTO co_pago_balance_alumno(CO_BALANCE_ALUMNO,FECHA,PAGO,NOTA,GENERO)
							VALUES($1,$2,$3,$4,$5)';								
BEGIN    

	raise notice 'AGREGAR PAGO';	
	fecha_current := getDate('');	
	select * from co_alumno where id = id_alumno INTO alumno_record;		
		
	select * from co_balance_alumno where id = alumno_record.co_balance_alumno and eliminado = false 
			INTO balance_record;
	
	raise notice 'pass 1';
			
	--IF balance_record is not null THEN
	IF FOUND THEN			
		
				EXECUTE sqlInsertPago
					USING balance_record.ID,							
							(getDate('')+getHora(''))::timestamp,
							pago_param,														
							nota,
							id_genero;						
		raise notice 'pass 2';
				---actualizar total balance alumno Agregar cargos								
				UPDATE co_balance_alumno 
					SET TOTAL_PAGOS = (TOTAL_PAGOS + pago_param),
						TOTAL_ADEUDO = (TOTAL_ADEUDO - pago_param)				
				where id = balance_record.id;		
			raise notice 'se registro el pago ';
	
	
	ELSE
		raise notice 'NO EXISTE EL BALANCE';
	
	END IF;		
	retorno := true;
END;
$$ 
LANGUAGE 'plpgsql';








--registrar un cargo : agregar_cargo_alumno(IN id_balance integer, id_alumno integer,id_cargo integer ,cantidad integer ,nota text ,id_genero integer);
select agregar_cargo_alumno(53,62,3,1,'test de cargo',1);

--registrar un pago : agregar_pago_alumno(IN id_balance integer,pago_param numeric ,nota text ,id_genero integer,OUT retorno boolean) AS $$
select agregar_pago_alumno(53,50,'sin nota',1)

