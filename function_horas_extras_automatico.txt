

CREATE or replace FUNCTION generar_horas_extras(OUT retorno boolean) 
	RETURNS boolean
 	LANGUAGE plpgsql 	
 AS 
--do
$$
DECLARE
	asistencia RECORD;	
	hora_generate TIMESTAMP;	
	hora_inicio_hora_extra TIMESTAMP;	
	hora_fin_hora_extra TIMESTAMP;	
	fecha_hora_current TIMESTAMP;	
	hora_extra_encontrada RECORD;
	INTERVALO_TIEMPO_HORA_EXTRA text := '30 minutes';
	ID_HORA_EXTRA integer := 3;
	ID_GENERO integer := 1;
	papas_record RECORD;	
	fallo boolean := false;
	mensaje_fallo text :='';
	token_familiar text := '';
	ids_alumnos integer[];
bEGIN
	raise notice 'CALCULAR HORAS EXTRAS AUTOMATICAS';
		
		fecha_hora_current := (getDate('')+getHora(''))::timestamp;
		
		FOR asistencia IN ( 
				select a.id as id_asistencia,
						a.co_alumno,
						a.fecha as fecha_entrada_asistencia,
						a.hora_entrada as hora_entrada_asistencia ,
						a.hora_salida as hora_salida_asistencia,
						alumno.minutos_gracia,
						alumno.nombre as nombre_alumno, 
						alumno.hora_salida as hora_salida_alumno,
						(alumno.hora_salida + interval '1 minute' * alumno.minutos_gracia) as hora_salida_mas_minutos_gracia_alumno
			from co_asistencia a inner join co_alumno alumno on a.co_alumno = alumno.id																					
			where a.hora_salida is null and a.eliminado = false				
		) LOOP 
			-- si hora de salida de asistencia es mayor a la hora salida registrada + minutos gracias
			raise notice 'fecha_hora_current %',fecha_hora_current;
					IF fecha_hora_current >= (asistencia.fecha_entrada_asistencia::date + asistencia.hora_salida_mas_minutos_gracia_alumno)::timestamp THEN
					raise notice 'calcular horas extras alumno %',asistencia.nombre_alumno;
					FOR hora_generate IN ( 			
								-- intervalo desde la hora de salida del alumno registrada hasta ahorita cada 3o mins
								SELECT * FROM generate_series((fecha_hora_current::date + asistencia.hora_salida_alumno)::timestamp,
																fecha_hora_current,'30 minutes')
							) 
					LOOP 	
						hora_inicio_hora_extra := hora_generate;
						hora_fin_hora_extra := (hora_generate + interval '30 minutes');
										
						raise notice 'validando la existencia de la hora extra INICIO %  FIN %',hora_inicio_hora_extra,hora_fin_hora_extra;
								select * from co_hora_extra he 
										where fecha::date = asistencia.fecha_entrada_asistencia												
												and co_alumno = asistencia.co_alumno
												and hora_inicio = hora_inicio_hora_extra
												and hora_fin =  hora_fin_hora_extra
												and eliminado = false
								INTO hora_extra_encontrada;
						IF NOT FOUND THEN		
							raise notice 'SE PROCEDE A LA INSERCIÃ“N';							
							INSERT INTO CO_HORA_EXTRA (CO_ASISTENCIA,CO_ALUMNO,FECHA,HORA_INICIO,HORA_FIN,FECHA_GENERO,GENERO)
							VALUES(asistencia.id_asistencia,
									asistencia.co_alumno,
									fecha_hora_current,
								  	hora_inicio_hora_extra,hora_fin_hora_extra,fecha_hora_current,ID_GENERO);							
							
							PERFORM agregar_cargo_alumno(asistencia.co_alumno,ID_HORA_EXTRA,1,
														'Cargo por Tiempo Extra del '||fecha_hora_current::date||', de '||hora_inicio_hora_extra::time||' a '||(hora_fin_hora_extra)::time||', alumno '
														||asistencia.nombre_alumno||'.'
														,ID_GENERO);
								
						--insertar en notificaciones
								FOR papas_record IN ( 			
										select rel.envio_avisos,rel.co_alumno,f.token,f.*
												from co_alumno_familiar rel inner join co_familiar f on rel.co_familiar = f.id
										where co_alumno = asistencia.co_alumno
												and rel.autorizado_para_entrega = true
												and rel.eliminado = false
												and f.eliminado = false
												and rel.co_parentesco in (1,2)  order by rel.co_parentesco desc  
								) LOOP				
										IF papas_record.token is null THEN
											fallo := true;
											mensaje_fallo := 'EL FAMILIAR NO CUENTA CON UN TOKEN. [ALUMNO '||asistencia.nombre_alumno||']';									
										ELSE
											token_familiar := papas_record.token;
										END IF;	
									
										INSERT INTO SI_NOTIFICACION (FECHA,TITULO,CUERPO,ICON,TOKEN,fallo,mensaje_fallo,FECHA_GENERO,GENERO)
											VALUES(fecha_hora_current,											
														'Cargo por Tiempo Extra',
														'Cargo por Tiempo Extra del '||fecha_hora_current::date||', de '||hora_inicio_hora_extra::time||' a '||(hora_fin_hora_extra)::time||', alumno '
														||asistencia.nombre_alumno||'.',
														'DEFAULT',
														token_familiar,
														fallo,
														mensaje_fallo,
														fecha_hora_current,
														ID_GENERO);			
										raise notice 'INSERCION DE HORA EXTRA EXISTOSA';
								END LOOP;																							
						ELSE 
							raise notice 'YA EXISTE UN REGISTRO CON LAS HORAS EXPECIFICADAS, NO SE INSERTO';
						END IF;					
					
					  END LOOP;-- LOOP DE HORAS GENERADAS
				ELSE 
					raise notice 'SIN CALCULAR HORAS EXTRAS ';
												
				END IF; --END ASISTENCIA + HORA SALIDA						
			END LOOP;					
	
	retorno:=true;
	
END; --END FUNCTION 
$$ 
